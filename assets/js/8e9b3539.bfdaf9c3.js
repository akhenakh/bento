"use strict";(self.webpackChunkbento=self.webpackChunkbento||[]).push([[9362],{16427:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return l}});var s=t(85893),r=t(11151);const a={title:"Streams Via REST API"},o=void 0,i={id:"guides/streams_mode/using_rest_api",title:"Streams Via REST API",description:"By using the Bento streams mode REST API you can dynamically control which streams are active at runtime. The full spec for the Bento streams mode REST API can be found here.",source:"@site/docs/guides/streams_mode/using_rest_api.md",sourceDirName:"guides/streams_mode",slug:"/guides/streams_mode/using_rest_api",permalink:"/bento/docs/guides/streams_mode/using_rest_api",draft:!1,unlisted:!1,editUrl:"https://github.com/warpstreamlabs/bento/edit/main/website/docs/guides/streams_mode/using_rest_api.md",tags:[],version:"current",frontMatter:{title:"Streams Via REST API"},sidebar:"docs",previous:{title:"Streams Via Config Files",permalink:"/bento/docs/guides/streams_mode/using_config_files"},next:{title:"Streams API",permalink:"/bento/docs/guides/streams_mode/streams_api"}},c={},l=[{value:"Walkthrough",id:"walkthrough",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["By using the Bento ",(0,s.jsx)(n.code,{children:"streams"})," mode REST API you can dynamically control which streams are active at runtime. The full spec for the Bento streams mode REST API can be ",(0,s.jsx)(n.a,{href:"/docs/guides/streams_mode/streams_api",children:"found here"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that stream configs created and updated using this API do ",(0,s.jsx)(n.em,{children:"not"})," benefit from ",(0,s.jsx)(n.a,{href:"/docs/configuration/interpolation",children:"environment variable interpolation"})," (function interpolation will still work)."]}),"\n",(0,s.jsx)(n.h2,{id:"walkthrough",children:"Walkthrough"}),"\n",(0,s.jsx)(n.p,{children:"Start by running Bento in streams mode:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ bento streams\n"})}),"\n",(0,s.jsxs)(n.p,{children:["On a separate terminal we can add our first stream ",(0,s.jsx)(n.code,{children:"foo"})," by ",(0,s.jsx)(n.code,{children:"POST"}),"ing a JSON or YAML config to the ",(0,s.jsx)(n.code,{children:"/streams/foo"})," endpoint:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ curl http://localhost:4195/streams/foo -X POST --data-binary @- <<EOF\ninput:\n  http_server: {}\nbuffer:\n  memory: {}\npipeline:\n  threads: 4\n  processors:\n    - mapping: |\n        root = {\n          "id": this.user.id,\n          "content": this.body.content\n        }\noutput:\n  http_server: {}\nEOF\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now we can check the full set of streams loaded by ",(0,s.jsx)(n.code,{children:"GET"}),"ing the ",(0,s.jsx)(n.code,{children:"/streams"})," endpoint:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ curl http://localhost:4195/streams | jq \'.\'\n{\n  "foo": {\n    "active": true,\n    "uptime": 7.223545951,\n    "uptime_str": "7.223545951s"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"And we can send data to our new stream via its namespaced URL:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ curl http://localhost:4195/foo/post -d \'{"user":{"id":"foo"},"body":{"content":"bar"}}\'\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Good, now let's add another stream ",(0,s.jsx)(n.code,{children:"bar"})," the same way:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ curl http://localhost:4195/streams/bar -X POST --data-binary @- <<EOF\ninput:\n  kafka:\n    addresses:\n      - localhost:9092\n    topics:\n      - my_topic\npipeline:\n  threads: 1\n  processors:\n    - mapping: 'root = this.uppercase()'\noutput:\n  elasticsearch:\n    urls:\n      - http://localhost:9200\nEOF\n"})}),"\n",(0,s.jsx)(n.p,{children:"And check the set again:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ curl http://localhost:4195/streams | jq \'.\'\n{\n  "bar": {\n    "active": true,\n    "uptime": 10.121344484,\n    "uptime_str": "10.121344484s"\n  },\n  "foo": {\n    "active": true,\n    "uptime": 19.380582951,\n    "uptime_str": "19.380583306s"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["It's also possible to get the configuration of a loaded stream by ",(0,s.jsx)(n.code,{children:"GET"}),"ing the path ",(0,s.jsx)(n.code,{children:"/streams/{id}"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ curl http://localhost:4195/streams/foo | jq \'.\'\n{\n  "active": true,\n  "uptime": 30.123488951,\n  "uptime_str": "30.123488951s"\n  "config": {\n    "input": {\n      "http_server": {\n        "address": "",\n        "cert_file": "",\n        "key_file": "",\n        "path": "/post",\n        "timeout": "5s"\n      }\n    },\n    "buffer": {\n      "memory": {\n        "limit": 10000000\n      }\n    },\n    ... etc ...\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Next, we might want to update stream ",(0,s.jsx)(n.code,{children:"foo"})," by ",(0,s.jsx)(n.code,{children:"PUT"}),"ing a new config to the path ",(0,s.jsx)(n.code,{children:"/streams/foo"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ curl http://localhost:4195/streams/foo -X PUT --data-binary @- <<EOF\ninput:\n  http_server: {}\npipeline:\n  threads: 4\n  processors:\n  - mapping: |\n      root = {\n        "id": this.user.id,\n        "content": this.body.content\n      }\noutput:\n  http_server: {}\nEOF\n'})}),"\n",(0,s.jsx)(n.p,{children:"We have removed the memory buffer with this change, let's check that the config has actually been updated:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ curl http://localhost:4195/streams/foo | jq \'.\'\n{\n  "active": true,\n  "uptime": 12.328482951,\n  "uptime_str": "12.328482951s"\n  "config": {\n    "input": {\n      "http_server": {\n        "address": "",\n        "cert_file": "",\n        "key_file": "",\n        "path": "/post",\n        "timeout": "5s"\n      }\n    },\n    "buffer": {\n      "type": "none"\n    },\n    ... etc ...\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Good, we are done with stream ",(0,s.jsx)(n.code,{children:"bar"})," now, so let's delete it by ",(0,s.jsx)(n.code,{children:"DELETE"}),"ing the ",(0,s.jsx)(n.code,{children:"/streams/bar"})," endpoint:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ curl http://localhost:4195/streams/bar -X DELETE\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And let's ",(0,s.jsx)(n.code,{children:"GET"})," the ",(0,s.jsx)(n.code,{children:"/streams"})," endpoint to see the new set:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ curl http://localhost:4195/streams | jq \'.\'\n{\n  "foo": {\n    "active": true,\n    "uptime": 31.872448851,\n    "uptime_str": "31.872448851s"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Great. Another useful feature is ",(0,s.jsx)(n.code,{children:"POST"}),"ing to ",(0,s.jsx)(n.code,{children:"/streams"}),", this allows us to set the entire set of streams with a single request."]}),"\n",(0,s.jsx)(n.p,{children:"The payload is a map of stream ids to configurations and this will become the exclusive set of active streams. If there are existing streams that are not on the list they will be removed."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ curl http://localhost:4195/streams -X POST --data-binary @- <<EOF\nbar:\n  input:\n    http_client:\n      url: http://localhost:4195/baz/get\n  output:\n    stdout: {}\nbaz:\n  input:\n    http_server: {}\n  output:\n    http_server: {}\nEOF\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's check our new set of streams:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'$ curl http://localhost:4195/streams | jq \'.\'\n{\n  "bar": {\n    "active": true,\n    "uptime": 3.183883444,\n    "uptime_str": "3.183883444s"\n  },\n  "baz": {\n    "active": true,\n    "uptime": 3.183883449,\n    "uptime_str": "3.183883449s"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Done."})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:function(e,n,t){t.d(n,{Z:function(){return i},a:function(){return o}});var s=t(67294);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);