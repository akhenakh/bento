"use strict";(self.webpackChunkbento=self.webpackChunkbento||[]).push([[9628],{79289:function(e,n,s){s.r(n),s.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return h}});var t=s(85893),o=s(11151),i=s(74866),a=s(85162);const r={title:"snowflake_put",slug:"snowflake_put",type:"output",status:"beta",categories:["Services"],name:"snowflake_put"},l=void 0,c={id:"components/outputs/snowflake_put",title:"snowflake_put",description:"\x3c!--",source:"@site/docs/components/outputs/snowflake_put.md",sourceDirName:"components/outputs",slug:"/components/outputs/snowflake_put",permalink:"/docs/components/outputs/snowflake_put",draft:!1,unlisted:!1,editUrl:"https://github.com/warpstreamlabs/bento/edit/main/website/docs/components/outputs/snowflake_put.md",tags:[],version:"current",frontMatter:{title:"snowflake_put",slug:"snowflake_put",type:"output",status:"beta",categories:["Services"],name:"snowflake_put"},sidebar:"docs",previous:{title:"sftp",permalink:"/docs/components/outputs/sftp"},next:{title:"socket",permalink:"/docs/components/outputs/socket"}},d={},h=[{value:"Credentials",id:"credentials",level:3},{value:"User/password",id:"userpassword",level:4},{value:"Key Pair Authentication",id:"key-pair-authentication",level:4},{value:"Batching",id:"batching",level:3},{value:"Snowpipe",id:"snowpipe",level:3},{value:"Snowpipe Troubleshooting",id:"snowpipe-troubleshooting",level:3},{value:"General Troubleshooting",id:"general-troubleshooting",level:3},{value:"Performance",id:"performance",level:2},{value:"Examples",id:"examples",level:2},{value:"Fields",id:"fields",level:2},{value:"<code>account</code>",id:"account",level:3},{value:"<code>region</code>",id:"region",level:3},{value:"<code>cloud</code>",id:"cloud",level:3},{value:"<code>user</code>",id:"user",level:3},{value:"<code>password</code>",id:"password",level:3},{value:"<code>private_key_file</code>",id:"private_key_file",level:3},{value:"<code>private_key_pass</code>",id:"private_key_pass",level:3},{value:"<code>role</code>",id:"role",level:3},{value:"<code>database</code>",id:"database",level:3},{value:"<code>warehouse</code>",id:"warehouse",level:3},{value:"<code>schema</code>",id:"schema",level:3},{value:"<code>stage</code>",id:"stage",level:3},{value:"<code>path</code>",id:"path",level:3},{value:"<code>file_name</code>",id:"file_name",level:3},{value:"<code>file_extension</code>",id:"file_extension",level:3},{value:"<code>upload_parallel_threads</code>",id:"upload_parallel_threads",level:3},{value:"<code>compression</code>",id:"compression",level:3},{value:"<code>request_id</code>",id:"request_id",level:3},{value:"<code>snowpipe</code>",id:"snowpipe-1",level:3},{value:"<code>client_session_keep_alive</code>",id:"client_session_keep_alive",level:3},{value:"<code>batching</code>",id:"batching-1",level:3},{value:"<code>batching.count</code>",id:"batchingcount",level:3},{value:"<code>batching.byte_size</code>",id:"batchingbyte_size",level:3},{value:"<code>batching.period</code>",id:"batchingperiod",level:3},{value:"<code>batching.check</code>",id:"batchingcheck",level:3},{value:"<code>batching.processors</code>",id:"batchingprocessors",level:3},{value:"<code>max_in_flight</code>",id:"max_in_flight",level:3}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{title:"BETA",type:"caution",children:(0,t.jsx)(n.p,{children:"This component is mostly stable but breaking changes could still be made outside of major version releases if a fundamental problem with the component is found."})}),"\n",(0,t.jsx)(n.p,{children:"Sends messages to Snowflake stages and, optionally, calls Snowpipe to load this data into one or more tables."}),"\n",(0,t.jsx)(n.p,{children:"Introduced in version 4.0.0."}),"\n",(0,t.jsxs)(i.Z,{defaultValue:"common",values:[{label:"Common",value:"common"},{label:"Advanced",value:"advanced"}],children:[(0,t.jsx)(a.Z,{value:"common",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'# Common config fields, showing default values\noutput:\n  label: ""\n  snowflake_put:\n    account: "" # No default (required)\n    region: us-west-2 # No default (optional)\n    cloud: aws # No default (optional)\n    user: "" # No default (required)\n    password: "" # No default (optional)\n    private_key_file: "" # No default (optional)\n    private_key_pass: "" # No default (optional)\n    role: "" # No default (required)\n    database: "" # No default (required)\n    warehouse: "" # No default (required)\n    schema: "" # No default (required)\n    stage: "" # No default (required)\n    path: ""\n    file_name: ""\n    file_extension: ""\n    compression: AUTO\n    request_id: ""\n    snowpipe: "" # No default (optional)\n    batching:\n      count: 0\n      byte_size: 0\n      period: ""\n      check: ""\n    max_in_flight: 1\n'})})}),(0,t.jsx)(a.Z,{value:"advanced",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'# All config fields, showing default values\noutput:\n  label: ""\n  snowflake_put:\n    account: "" # No default (required)\n    region: us-west-2 # No default (optional)\n    cloud: aws # No default (optional)\n    user: "" # No default (required)\n    password: "" # No default (optional)\n    private_key_file: "" # No default (optional)\n    private_key_pass: "" # No default (optional)\n    role: "" # No default (required)\n    database: "" # No default (required)\n    warehouse: "" # No default (required)\n    schema: "" # No default (required)\n    stage: "" # No default (required)\n    path: ""\n    file_name: ""\n    file_extension: ""\n    upload_parallel_threads: 4\n    compression: AUTO\n    request_id: ""\n    snowpipe: "" # No default (optional)\n    client_session_keep_alive: false\n    batching:\n      count: 0\n      byte_size: 0\n      period: ""\n      check: ""\n      processors: [] # No default (optional)\n    max_in_flight: 1\n'})})})]}),"\n",(0,t.jsxs)(n.p,{children:["In order to use a different stage and / or Snowpipe for each message, you can use function interpolations as described\n",(0,t.jsx)(n.a,{href:"/docs/configuration/interpolation#bloblang-queries",children:"here"}),". When using batching, messages are grouped by the calculated\nstage and Snowpipe and are streamed to individual files in their corresponding stage and, optionally, a Snowpipe\n",(0,t.jsx)(n.code,{children:"insertFiles"})," REST API call will be made for each individual file."]}),"\n",(0,t.jsx)(n.h3,{id:"credentials",children:"Credentials"}),"\n",(0,t.jsx)(n.p,{children:"Two authentication mechanisms are supported:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"User/password"}),"\n",(0,t.jsx)(n.li,{children:"Key Pair Authentication"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"userpassword",children:"User/password"}),"\n",(0,t.jsx)(n.p,{children:"This is a basic authentication mechanism which allows you to PUT data into a stage. However, it is not compatible with\nSnowpipe."}),"\n",(0,t.jsx)(n.h4,{id:"key-pair-authentication",children:"Key Pair Authentication"}),"\n",(0,t.jsxs)(n.p,{children:["This authentication mechanism allows Snowpipe functionality, but it does require configuring an SSH Private Key\nbeforehand. Please consult the ",(0,t.jsx)(n.a,{href:"https://docs.snowflake.com/en/user-guide/key-pair-auth.html#configuring-key-pair-authentication",children:"documentation"}),"\nfor details on how to set it up and assign the Public Key to your user."]}),"\n",(0,t.jsxs)(n.p,{children:["Note that the Snowflake documentation ",(0,t.jsx)(n.a,{href:"https://twitter.com/felipehoffa/status/1560811785606684672",children:"used to suggest"}),"\nusing this command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"openssl genrsa 2048 | openssl pkcs8 -topk8 -inform PEM -out rsa_key.p8\n"})}),"\n",(0,t.jsxs)(n.p,{children:["to generate an encrypted SSH private key. However, in this case, it uses an encryption algorithm called\n",(0,t.jsx)(n.code,{children:"pbeWithMD5AndDES-CBC"}),", which is part of the PKCS#5 v1.5 and is considered insecure. Due to this, Bento does not\nsupport it and, if you wish to use password-protected keys directly, you must use PKCS#5 v2.0 to encrypt them by using\nthe following command (as the current Snowflake docs suggest):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"openssl genrsa 2048 | openssl pkcs8 -topk8 -v2 des3 -inform PEM -out rsa_key.p8\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you have an existing key encrypted with PKCS#5 v1.5, you can re-encrypt it with PKCS#5 v2.0 using this command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"openssl pkcs8 -in rsa_key_original.p8 -topk8 -v2 des3 -out rsa_key.p8\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Please consult ",(0,t.jsx)(n.a,{href:"https://linux.die.net/man/1/pkcs8",children:"this"})," pkcs8 command documentation for details on PKCS#5 algorithms."]}),"\n",(0,t.jsx)(n.h3,{id:"batching",children:"Batching"}),"\n",(0,t.jsxs)(n.p,{children:["It's common to want to upload messages to Snowflake as batched archives. The easiest way to do this is to batch your\nmessages at the output level and join the batch of messages with an\n",(0,t.jsx)(n.a,{href:"/docs/components/processors/archive",children:(0,t.jsx)(n.code,{children:"archive"})})," and/or ",(0,t.jsx)(n.a,{href:"/docs/components/processors/compress",children:(0,t.jsx)(n.code,{children:"compress"})}),"\nprocessor."]}),"\n",(0,t.jsxs)(n.p,{children:["For the optimal batch size, please consult the Snowflake ",(0,t.jsx)(n.a,{href:"https://docs.snowflake.com/en/user-guide/data-load-considerations-prepare.html",children:"documentation"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"snowpipe",children:"Snowpipe"}),"\n",(0,t.jsxs)(n.p,{children:["Given a table called ",(0,t.jsx)(n.code,{children:"BENTO_TBL"})," with one column of type ",(0,t.jsx)(n.code,{children:"variant"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE OR REPLACE TABLE BENTO_DB.PUBLIC.BENTO_TBL(RECORD variant)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["and the following ",(0,t.jsx)(n.code,{children:"BENTO_PIPE"})," Snowpipe:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE OR REPLACE PIPE BENTO_DB.PUBLIC.BENTO_PIPE AUTO_INGEST = FALSE AS COPY INTO BENTO_DB.PUBLIC.BENTO_TBL FROM (SELECT * FROM @%BENTO_TBL) FILE_FORMAT = (TYPE = JSON COMPRESSION = AUTO)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["you can configure Bento to use the implicit table stage ",(0,t.jsx)(n.code,{children:"@%BENTO_TBL"})," as the ",(0,t.jsx)(n.code,{children:"stage"})," and\n",(0,t.jsx)(n.code,{children:"BENTO_PIPE"})," as the ",(0,t.jsx)(n.code,{children:"snowpipe"}),". In this case, you must set ",(0,t.jsx)(n.code,{children:"compression"})," to ",(0,t.jsx)(n.code,{children:"AUTO"})," and, if\nusing message batching, you'll need to configure an ",(0,t.jsx)(n.a,{href:"/docs/components/processors/archive",children:(0,t.jsx)(n.code,{children:"archive"})})," processor\nwith the ",(0,t.jsx)(n.code,{children:"concatenate"})," format. Since the ",(0,t.jsx)(n.code,{children:"compression"})," is set to ",(0,t.jsx)(n.code,{children:"AUTO"}),", the\n",(0,t.jsx)(n.a,{href:"https://github.com/snowflakedb/gosnowflake",children:"gosnowflake"})," client library will compress the messages automatically so you\ndon't need to add a ",(0,t.jsx)(n.a,{href:"/docs/components/processors/compress",children:(0,t.jsx)(n.code,{children:"compress"})})," processor for message batches."]}),"\n",(0,t.jsxs)(n.p,{children:["If you add ",(0,t.jsx)(n.code,{children:"STRIP_OUTER_ARRAY = TRUE"})," in your Snowpipe ",(0,t.jsx)(n.code,{children:"FILE_FORMAT"}),"\ndefinition, then you must use ",(0,t.jsx)(n.code,{children:"json_array"})," instead of ",(0,t.jsx)(n.code,{children:"concatenate"})," as the archive processor format."]}),"\n",(0,t.jsxs)(n.p,{children:["Note: Only Snowpipes with ",(0,t.jsx)(n.code,{children:"FILE_FORMAT"})," ",(0,t.jsx)(n.code,{children:"TYPE"})," ",(0,t.jsx)(n.code,{children:"JSON"})," are currently supported."]}),"\n",(0,t.jsx)(n.h3,{id:"snowpipe-troubleshooting",children:"Snowpipe Troubleshooting"}),"\n",(0,t.jsxs)(n.p,{children:["Snowpipe ",(0,t.jsx)(n.a,{href:"https://docs.snowflake.com/en/user-guide/data-load-snowpipe-rest-apis.html",children:"provides"})," the ",(0,t.jsx)(n.code,{children:"insertReport"}),"\nand ",(0,t.jsx)(n.code,{children:"loadHistoryScan"})," REST API endpoints which can be used to get information about recent Snowpipe calls. In\norder to query them, you'll first need to generate a valid JWT token for your Snowflake account. There are two methods\nfor doing so:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Using the ",(0,t.jsx)(n.code,{children:"snowsql"})," ",(0,t.jsx)(n.a,{href:"https://docs.snowflake.com/en/user-guide/snowsql.html",children:"utility"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"snowsql --private-key-path rsa_key.p8 --generate-jwt -a <account> -u <user>\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Using the Python ",(0,t.jsx)(n.code,{children:"sql-api-generate-jwt"})," ",(0,t.jsx)(n.a,{href:"https://docs.snowflake.com/en/developer-guide/sql-api/authenticating.html#generating-a-jwt-in-python",children:"utility"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"python3 sql-api-generate-jwt.py --private_key_file_path=rsa_key.p8 --account=<account> --user=<user>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Once you successfully generate a JWT token and store it into the ",(0,t.jsx)(n.code,{children:"JWT_TOKEN"})," environment variable, then you can,\nfor example, query the ",(0,t.jsx)(n.code,{children:"insertReport"})," endpoint using ",(0,t.jsx)(n.code,{children:"curl"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'curl -H "Authorization: Bearer ${JWT_TOKEN}" "https://<account>.snowflakecomputing.com/v1/data/pipes/<database>.<schema>.<snowpipe>/insertReport"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If you need to pass in a valid ",(0,t.jsx)(n.code,{children:"requestId"})," to any of these Snowpipe REST API endpoints, you can set a\n",(0,t.jsx)(n.a,{href:"https://www.benthos.dev/docs/guides/bloblang/functions#uuid_v4",children:"uuid_v4()"})," string in a metadata field called\n",(0,t.jsx)(n.code,{children:"request_id"}),", log it via the ",(0,t.jsx)(n.a,{href:"https://www.benthos.dev/docs/components/processors/log",children:(0,t.jsx)(n.code,{children:"log"})})," processor and\nthen configure ",(0,t.jsx)(n.code,{children:"request_id: ${ @request_id }"})," ). Alternatively, you can enable debug logging as described\n",(0,t.jsx)(n.a,{href:"/docs/components/logger/about",children:"here"})," and Bento will print the Request IDs that it sends to Snowpipe."]}),"\n",(0,t.jsx)(n.h3,{id:"general-troubleshooting",children:"General Troubleshooting"}),"\n",(0,t.jsxs)(n.p,{children:["The underlying ",(0,t.jsxs)(n.a,{href:"https://github.com/snowflakedb/gosnowflake",children:[(0,t.jsx)(n.code,{children:"gosnowflake"})," driver"]})," requires write access to\nthe default directory to use for temporary files. Please consult the ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/os#TempDir",children:(0,t.jsx)(n.code,{children:"os.TempDir"})}),"\ndocs for details on how to change this directory via environment variables."]}),"\n",(0,t.jsxs)(n.p,{children:["A silent failure can occur due to ",(0,t.jsx)(n.a,{href:"https://github.com/snowflakedb/gosnowflake/issues/701",children:"this issue"}),", where the\nunderlying ",(0,t.jsxs)(n.a,{href:"https://github.com/snowflakedb/gosnowflake",children:[(0,t.jsx)(n.code,{children:"gosnowflake"})," driver"]})," doesn't return an error and doesn't\nlog a failure if it can't figure out the current username. One way to trigger this behaviour is by running Bento in a\nDocker container with a non-existent user ID (such as ",(0,t.jsx)(n.code,{children:"--user 1000:1000"}),")."]}),"\n",(0,t.jsx)(n.h2,{id:"performance",children:"Performance"}),"\n",(0,t.jsxs)(n.p,{children:["This output benefits from sending multiple messages in flight in parallel for improved performance. You can tune the max number of in flight messages (or message batches) with the field ",(0,t.jsx)(n.code,{children:"max_in_flight"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This output benefits from sending messages as a batch for improved performance. Batches can be formed at both the input and output level. You can find out more ",(0,t.jsx)(n.a,{href:"/docs/configuration/batching",children:"in this doc"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(i.Z,{defaultValue:"Kafka / realtime brokers",values:[{label:"Kafka / realtime brokers",value:"Kafka / realtime brokers"},{label:"No compression",value:"No compression"},{label:"Parquet format with snappy compression",value:"Parquet format with snappy compression"},{label:"Automatic compression",value:"Automatic compression"},{label:"DEFLATE compression",value:"DEFLATE compression"},{label:"RAW_DEFLATE compression",value:"RAW_DEFLATE compression"}],children:[(0,t.jsxs)(a.Z,{value:"Kafka / realtime brokers",children:[(0,t.jsxs)(n.p,{children:["Upload message batches from realtime brokers such as Kafka persisting the batch partition and offsets in the stage path and filename similarly to the ",(0,t.jsx)(n.a,{href:"https://docs.snowflake.com/en/user-guide/kafka-connector-ts.html#step-1-view-the-copy-history-for-the-table",children:"Kafka Connector scheme"})," and call Snowpipe to load them into a table. When batching is configured at the input level, it is done per-partition."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'input:\n  kafka:\n    addresses:\n      - localhost:9092\n    topics:\n      - foo\n    consumer_group: bento\n    batching:\n      count: 10\n      period: 3s\n      processors:\n        - mapping: |\n            meta kafka_start_offset = meta("kafka_offset").from(0)\n            meta kafka_end_offset = meta("kafka_offset").from(-1)\n            meta batch_timestamp = if batch_index() == 0 { now() }\n        - mapping: |\n            meta batch_timestamp = if batch_index() != 0 { meta("batch_timestamp").from(0) }\n\noutput:\n  snowflake_put:\n    account: bento\n    user: test@warpstreamlabs.com\n    private_key_file: path_to_ssh_key.pem\n    role: ACCOUNTADMIN\n    database: BENTO_DB\n    warehouse: COMPUTE_WH\n    schema: PUBLIC\n    stage: "@%BENTO_TBL"\n    path: bento/BENTO_TBL/${! @kafka_partition }\n    file_name: ${! @kafka_start_offset }_${! @kafka_end_offset }_${! meta("batch_timestamp") }\n    upload_parallel_threads: 4\n    compression: NONE\n    snowpipe: BENTO_PIPE\n'})})]}),(0,t.jsxs)(a.Z,{value:"No compression",children:[(0,t.jsxs)(n.p,{children:["Upload concatenated messages into a ",(0,t.jsx)(n.code,{children:".json"})," file to a table stage without calling Snowpipe."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'output:\n  snowflake_put:\n    account: bento\n    user: test@warpstreamlabs.com\n    private_key_file: path_to_ssh_key.pem\n    role: ACCOUNTADMIN\n    database: BENTO_DB\n    warehouse: COMPUTE_WH\n    schema: PUBLIC\n    stage: "@%BENTO_TBL"\n    path: bento\n    upload_parallel_threads: 4\n    compression: NONE\n    batching:\n      count: 10\n      period: 3s\n      processors:\n        - archive:\n            format: concatenate\n'})})]}),(0,t.jsxs)(a.Z,{value:"Parquet format with snappy compression",children:[(0,t.jsxs)(n.p,{children:["Upload concatenated messages into a ",(0,t.jsx)(n.code,{children:".parquet"})," file to a table stage without calling Snowpipe."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'output:\n  snowflake_put:\n    account: bento\n    user: test@warpstreamlabs.com\n    private_key_file: path_to_ssh_key.pem\n    role: ACCOUNTADMIN\n    database: BENTO_DB\n    warehouse: COMPUTE_WH\n    schema: PUBLIC\n    stage: "@%BENTO_TBL"\n    path: bento\n    file_extension: parquet\n    upload_parallel_threads: 4\n    compression: NONE\n    batching:\n      count: 10\n      period: 3s\n      processors:\n        - parquet_encode:\n            schema:\n              - name: ID\n                type: INT64\n              - name: CONTENT\n                type: BYTE_ARRAY\n            default_compression: snappy\n'})})]}),(0,t.jsxs)(a.Z,{value:"Automatic compression",children:[(0,t.jsxs)(n.p,{children:["Upload concatenated messages compressed automatically into a ",(0,t.jsx)(n.code,{children:".gz"})," archive file to a table stage without calling Snowpipe."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'output:\n  snowflake_put:\n    account: bento\n    user: test@warpstreamlabs.com\n    private_key_file: path_to_ssh_key.pem\n    role: ACCOUNTADMIN\n    database: BENTO_DB\n    warehouse: COMPUTE_WH\n    schema: PUBLIC\n    stage: "@%BENTO_TBL"\n    path: bento\n    upload_parallel_threads: 4\n    compression: AUTO\n    batching:\n      count: 10\n      period: 3s\n      processors:\n        - archive:\n            format: concatenate\n'})})]}),(0,t.jsxs)(a.Z,{value:"DEFLATE compression",children:[(0,t.jsxs)(n.p,{children:["Upload concatenated messages compressed into a ",(0,t.jsx)(n.code,{children:".deflate"})," archive file to a table stage and call Snowpipe to load them into a table."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'output:\n  snowflake_put:\n    account: bento\n    user: test@warpstreamlabs.com\n    private_key_file: path_to_ssh_key.pem\n    role: ACCOUNTADMIN\n    database: BENTO_DB\n    warehouse: COMPUTE_WH\n    schema: PUBLIC\n    stage: "@%BENTO_TBL"\n    path: bento\n    upload_parallel_threads: 4\n    compression: DEFLATE\n    snowpipe: BENTO_PIPE\n    batching:\n      count: 10\n      period: 3s\n      processors:\n        - archive:\n            format: concatenate\n        - mapping: |\n            root = content().compress("zlib")\n'})})]}),(0,t.jsxs)(a.Z,{value:"RAW_DEFLATE compression",children:[(0,t.jsxs)(n.p,{children:["Upload concatenated messages compressed into a ",(0,t.jsx)(n.code,{children:".raw_deflate"})," archive file to a table stage and call Snowpipe to load them into a table."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'output:\n  snowflake_put:\n    account: bento\n    user: test@warpstreamlabs.com\n    private_key_file: path_to_ssh_key.pem\n    role: ACCOUNTADMIN\n    database: BENTO_DB\n    warehouse: COMPUTE_WH\n    schema: PUBLIC\n    stage: "@%BENTO_TBL"\n    path: bento\n    upload_parallel_threads: 4\n    compression: RAW_DEFLATE\n    snowpipe: BENTO_PIPE\n    batching:\n      count: 10\n      period: 3s\n      processors:\n        - archive:\n            format: concatenate\n        - mapping: |\n            root = content().compress("flate")\n'})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"fields",children:"Fields"}),"\n",(0,t.jsx)(n.h3,{id:"account",children:(0,t.jsx)(n.code,{children:"account"})}),"\n",(0,t.jsxs)(n.p,{children:["Account name, which is the same as the Account Identifier\nas described ",(0,t.jsx)(n.a,{href:"https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#where-are-account-identifiers-used",children:"here"}),".\nHowever, when using an ",(0,t.jsx)(n.a,{href:"https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#using-an-account-locator-as-an-identifier",children:"Account Locator"}),",\nthe Account Identifier is formatted as ",(0,t.jsx)(n.code,{children:"<account_locator>.<region_id>.<cloud>"})," and this field needs to be\npopulated using the ",(0,t.jsx)(n.code,{children:"<account_locator>"})," part."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"region",children:(0,t.jsx)(n.code,{children:"region"})}),"\n",(0,t.jsxs)(n.p,{children:["Optional region field which needs to be populated when using\nan ",(0,t.jsx)(n.a,{href:"https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#using-an-account-locator-as-an-identifier",children:"Account Locator"}),"\nand it must be set to the ",(0,t.jsx)(n.code,{children:"<region_id>"})," part of the Account Identifier\n(",(0,t.jsx)(n.code,{children:"<account_locator>.<region_id>.<cloud>"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"# Examples\n\nregion: us-west-2\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cloud",children:(0,t.jsx)(n.code,{children:"cloud"})}),"\n",(0,t.jsxs)(n.p,{children:["Optional cloud platform field which needs to be populated\nwhen using an ",(0,t.jsx)(n.a,{href:"https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#using-an-account-locator-as-an-identifier",children:"Account Locator"}),"\nand it must be set to the ",(0,t.jsx)(n.code,{children:"<cloud>"})," part of the Account Identifier\n(",(0,t.jsx)(n.code,{children:"<account_locator>.<region_id>.<cloud>"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"# Examples\n\ncloud: aws\n\ncloud: gcp\n\ncloud: azure\n"})}),"\n",(0,t.jsx)(n.h3,{id:"user",children:(0,t.jsx)(n.code,{children:"user"})}),"\n",(0,t.jsx)(n.p,{children:"Username."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"password",children:(0,t.jsx)(n.code,{children:"password"})}),"\n",(0,t.jsx)(n.p,{children:"An optional password."}),"\n",(0,t.jsx)(n.admonition,{title:"Secret",type:"warning",children:(0,t.jsxs)(n.p,{children:["This field contains sensitive information that usually shouldn't be added to a config directly, read our ",(0,t.jsx)(n.a,{href:"/docs/configuration/secrets",children:"secrets page for more info"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"private_key_file",children:(0,t.jsx)(n.code,{children:"private_key_file"})}),"\n",(0,t.jsx)(n.p,{children:"The path to a file containing the private SSH key."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"private_key_pass",children:(0,t.jsx)(n.code,{children:"private_key_pass"})}),"\n",(0,t.jsx)(n.p,{children:"An optional private SSH key passphrase."}),"\n",(0,t.jsx)(n.admonition,{title:"Secret",type:"warning",children:(0,t.jsxs)(n.p,{children:["This field contains sensitive information that usually shouldn't be added to a config directly, read our ",(0,t.jsx)(n.a,{href:"/docs/configuration/secrets",children:"secrets page for more info"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"role",children:(0,t.jsx)(n.code,{children:"role"})}),"\n",(0,t.jsx)(n.p,{children:"Role."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"database",children:(0,t.jsx)(n.code,{children:"database"})}),"\n",(0,t.jsx)(n.p,{children:"Database."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"warehouse",children:(0,t.jsx)(n.code,{children:"warehouse"})}),"\n",(0,t.jsx)(n.p,{children:"Warehouse."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"schema",children:(0,t.jsx)(n.code,{children:"schema"})}),"\n",(0,t.jsx)(n.p,{children:"Schema."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"stage",children:(0,t.jsx)(n.code,{children:"stage"})}),"\n",(0,t.jsxs)(n.p,{children:["Stage name. Use either one of the\n",(0,t.jsx)(n.a,{href:"https://docs.snowflake.com/en/user-guide/data-load-local-file-system-create-stage.html",children:"supported"})," stage types.\nThis field supports ",(0,t.jsx)(n.a,{href:"/docs/configuration/interpolation#bloblang-queries",children:"interpolation functions"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"path",children:(0,t.jsx)(n.code,{children:"path"})}),"\n",(0,t.jsxs)(n.p,{children:["Stage path.\nThis field supports ",(0,t.jsx)(n.a,{href:"/docs/configuration/interpolation#bloblang-queries",children:"interpolation functions"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'""'})]}),"\n",(0,t.jsx)(n.h3,{id:"file_name",children:(0,t.jsx)(n.code,{children:"file_name"})}),"\n",(0,t.jsxs)(n.p,{children:["Stage file name. Will be equal to the Request ID if not set or empty.\nThis field supports ",(0,t.jsx)(n.a,{href:"/docs/configuration/interpolation#bloblang-queries",children:"interpolation functions"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'""'}),(0,t.jsx)(n.br,{}),"\n","Requires version v4.12.0 or newer"]}),"\n",(0,t.jsx)(n.h3,{id:"file_extension",children:(0,t.jsx)(n.code,{children:"file_extension"})}),"\n",(0,t.jsxs)(n.p,{children:["Stage file extension. Will be derived from the configured ",(0,t.jsx)(n.code,{children:"compression"})," if not set or empty.\nThis field supports ",(0,t.jsx)(n.a,{href:"/docs/configuration/interpolation#bloblang-queries",children:"interpolation functions"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'""'}),(0,t.jsx)(n.br,{}),"\n","Requires version v4.12.0 or newer"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"# Examples\n\nfile_extension: csv\n\nfile_extension: parquet\n"})}),"\n",(0,t.jsx)(n.h3,{id:"upload_parallel_threads",children:(0,t.jsx)(n.code,{children:"upload_parallel_threads"})}),"\n",(0,t.jsx)(n.p,{children:"Specifies the number of threads to use for uploading files."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"int"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"4"})]}),"\n",(0,t.jsx)(n.h3,{id:"compression",children:(0,t.jsx)(n.code,{children:"compression"})}),"\n",(0,t.jsx)(n.p,{children:"Compression type."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'"AUTO"'})]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Option"}),(0,t.jsx)(n.th,{children:"Summary"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"AUTO"})}),(0,t.jsxs)(n.td,{children:["Compression (gzip) is applied automatically by the output and messages must contain plain-text JSON. Default ",(0,t.jsx)(n.code,{children:"file_extension"}),": ",(0,t.jsx)(n.code,{children:"gz"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DEFLATE"})}),(0,t.jsxs)(n.td,{children:["Messages must be pre-compressed using the zlib algorithm (with zlib header, RFC1950). Default ",(0,t.jsx)(n.code,{children:"file_extension"}),": ",(0,t.jsx)(n.code,{children:"deflate"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"GZIP"})}),(0,t.jsxs)(n.td,{children:["Messages must be pre-compressed using the gzip algorithm. Default ",(0,t.jsx)(n.code,{children:"file_extension"}),": ",(0,t.jsx)(n.code,{children:"gz"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"NONE"})}),(0,t.jsxs)(n.td,{children:["No compression is applied and messages must contain plain-text JSON. Default ",(0,t.jsx)(n.code,{children:"file_extension"}),": ",(0,t.jsx)(n.code,{children:"json"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"RAW_DEFLATE"})}),(0,t.jsxs)(n.td,{children:["Messages must be pre-compressed using the flate algorithm (without header, RFC1951). Default ",(0,t.jsx)(n.code,{children:"file_extension"}),": ",(0,t.jsx)(n.code,{children:"raw_deflate"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ZSTD"})}),(0,t.jsxs)(n.td,{children:["Messages must be pre-compressed using the Zstandard algorithm. Default ",(0,t.jsx)(n.code,{children:"file_extension"}),": ",(0,t.jsx)(n.code,{children:"zst"}),"."]})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"request_id",children:(0,t.jsx)(n.code,{children:"request_id"})}),"\n",(0,t.jsxs)(n.p,{children:["Request ID. Will be assigned a random UUID (v4) string if not set or empty.\nThis field supports ",(0,t.jsx)(n.a,{href:"/docs/configuration/interpolation#bloblang-queries",children:"interpolation functions"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'""'}),(0,t.jsx)(n.br,{}),"\n","Requires version v4.12.0 or newer"]}),"\n",(0,t.jsx)(n.h3,{id:"snowpipe-1",children:(0,t.jsx)(n.code,{children:"snowpipe"})}),"\n",(0,t.jsxs)(n.p,{children:["An optional Snowpipe name. Use the ",(0,t.jsx)(n.code,{children:"<snowpipe>"})," part from ",(0,t.jsx)(n.code,{children:"<database>.<schema>.<snowpipe>"}),".\nThis field supports ",(0,t.jsx)(n.a,{href:"/docs/configuration/interpolation#bloblang-queries",children:"interpolation functions"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"client_session_keep_alive",children:(0,t.jsx)(n.code,{children:"client_session_keep_alive"})}),"\n",(0,t.jsx)(n.p,{children:"Enable Snowflake keepalive mechanism to prevent the client session from expiring after 4 hours (error 390114)."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"bool"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"false"})]}),"\n",(0,t.jsx)(n.h3,{id:"batching-1",children:(0,t.jsx)(n.code,{children:"batching"})}),"\n",(0,t.jsxs)(n.p,{children:["Allows you to configure a ",(0,t.jsx)(n.a,{href:"/docs/configuration/batching",children:"batching policy"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"object"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'# Examples\n\nbatching:\n  byte_size: 5000\n  count: 0\n  period: 1s\n\nbatching:\n  count: 10\n  period: 1s\n\nbatching:\n  check: this.contains("END BATCH")\n  count: 0\n  period: 1m\n'})}),"\n",(0,t.jsx)(n.h3,{id:"batchingcount",children:(0,t.jsx)(n.code,{children:"batching.count"})}),"\n",(0,t.jsxs)(n.p,{children:["A number of messages at which the batch should be flushed. If ",(0,t.jsx)(n.code,{children:"0"})," disables count based batching."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"int"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"0"})]}),"\n",(0,t.jsx)(n.h3,{id:"batchingbyte_size",children:(0,t.jsx)(n.code,{children:"batching.byte_size"})}),"\n",(0,t.jsxs)(n.p,{children:["An amount of bytes at which the batch should be flushed. If ",(0,t.jsx)(n.code,{children:"0"})," disables size based batching."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"int"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"0"})]}),"\n",(0,t.jsx)(n.h3,{id:"batchingperiod",children:(0,t.jsx)(n.code,{children:"batching.period"})}),"\n",(0,t.jsx)(n.p,{children:"A period in which an incomplete batch should be flushed regardless of its size."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'""'})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"# Examples\n\nperiod: 1s\n\nperiod: 1m\n\nperiod: 500ms\n"})}),"\n",(0,t.jsx)(n.h3,{id:"batchingcheck",children:(0,t.jsx)(n.code,{children:"batching.check"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.a,{href:"/docs/guides/bloblang/about/",children:"Bloblang query"})," that should return a boolean value indicating whether a message should end a batch."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'""'})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'# Examples\n\ncheck: this.type == "end_of_transaction"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"batchingprocessors",children:(0,t.jsx)(n.code,{children:"batching.processors"})}),"\n",(0,t.jsxs)(n.p,{children:["A list of ",(0,t.jsx)(n.a,{href:"/docs/components/processors/about",children:"processors"})," to apply to a batch as it is flushed. This allows you to aggregate and archive the batch however you see fit. Please note that all resulting messages are flushed as a single batch, therefore splitting the batch into smaller batches using these processors is a no-op."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"array"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"# Examples\n\nprocessors:\n  - archive:\n      format: concatenate\n\nprocessors:\n  - archive:\n      format: lines\n\nprocessors:\n  - archive:\n      format: json_array\n"})}),"\n",(0,t.jsx)(n.h3,{id:"max_in_flight",children:(0,t.jsx)(n.code,{children:"max_in_flight"})}),"\n",(0,t.jsx)(n.p,{children:"The maximum number of parallel message batches to have in flight at any given time."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"int"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"1"})]})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},85162:function(e,n,s){s.d(n,{Z:function(){return a}});s(67294);var t=s(86010),o={tabItem:"tabItem_Ymn6"},i=s(85893);function a(e){let{children:n,hidden:s,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.Z)(o.tabItem,a),hidden:s,children:n})}},74866:function(e,n,s){s.d(n,{Z:function(){return w}});var t=s(67294),o=s(86010),i=s(12466),a=s(16550),r=s(20469),l=s(91980),c=s(67392),d=s(50012);function h(e){var n,s;return null!=(n=null==(s=t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:s.filter(Boolean))?n:[]}function u(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=null!=n?n:function(e){return h(e).map((e=>{let{props:{value:n,label:s,attributes:t,default:o}}=e;return{value:n,label:s,attributes:t,default:o}}))}(s);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,s])}function p(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:s}=e;const o=(0,a.k6)(),i=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=s?s:null}({queryString:n,groupId:s});return[(0,l._X)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(o.location.search);n.set(i,e),o.replace({...o.location,search:n.toString()})}),[i,o])]}function x(e){const{defaultValue:n,queryString:s=!1,groupId:o}=e,i=u(e),[a,l]=(0,t.useState)((()=>function(e){var n;let{defaultValue:s,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!p({value:s,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+s+'" but none of its children has the corresponding value. Available values are: '+t.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return s}const o=null!=(n=t.find((e=>e.default)))?n:t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:i}))),[c,h]=f({queryString:s,groupId:o}),[x,m]=function(e){let{groupId:n}=e;const s=function(e){return e?"docusaurus.tab."+e:null}(n),[o,i]=(0,d.Nk)(s);return[o,(0,t.useCallback)((e=>{s&&i.set(e)}),[s,i])]}({groupId:o}),j=(()=>{const e=null!=c?c:x;return p({value:e,tabValues:i})?e:null})();(0,r.Z)((()=>{j&&l(j)}),[j]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error("Can't select invalid tab value="+e);l(e),h(e),m(e)}),[h,m,i]),tabValues:i}}var m=s(72389),j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"},g=s(85893);function b(e){let{className:n,block:s,selectedValue:t,selectValue:a,tabValues:r}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const n=e.currentTarget,s=l.indexOf(n),o=r[s].value;o!==t&&(c(n),a(o))},h=e=>{var n;let s=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{var t;const n=l.indexOf(e.currentTarget)+1;s=null!=(t=l[n])?t:l[0];break}case"ArrowLeft":{var o;const n=l.indexOf(e.currentTarget)-1;s=null!=(o=l[n])?o:l[l.length-1];break}}null==(n=s)||n.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},n),children:r.map((e=>{let{value:n,label:s,attributes:i}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:h,onClick:d,...i,className:(0,o.Z)("tabs__item",j.tabItem,null==i?void 0:i.className,{"tabs__item--active":t===n}),children:null!=s?s:n},n)}))})}function _(e){let{lazy:n,children:s,selectedValue:o}=e;const i=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function v(e){const n=x(e);return(0,g.jsxs)("div",{className:(0,o.Z)("tabs-container",j.tabList),children:[(0,g.jsx)(b,{...e,...n}),(0,g.jsx)(_,{...e,...n})]})}function w(e){const n=(0,m.Z)();return(0,g.jsx)(v,{...e,children:h(e.children)},String(n))}},11151:function(e,n,s){s.d(n,{Z:function(){return r},a:function(){return a}});var t=s(67294);const o={},i=t.createContext(o);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);