"use strict";(self.webpackChunkbento=self.webpackChunkbento||[]).push([[1477],{30010:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/11/07/whats-next","metadata":{"permalink":"/blog/2022/11/07/whats-next","source":"@site/blog/2022-11-07-whats-next.md","title":"What\'s Next for Bento?","description":"A summary of what\'s going on and what\'s coming up","date":"2022-11-07T00:00:00.000Z","formattedDate":"November 7, 2022","tags":[{"label":"v4","permalink":"/blog/tags/v-4"},{"label":"studio","permalink":"/blog/tags/studio"}],"readingTime":6.8,"hasTruncateMarker":true,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"What\'s Next for Bento?","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","description":"A summary of what\'s going on and what\'s coming up","keywords":["v4","roadmap","go","golang","stream processor","ETL"],"tags":["v4","studio"]},"unlisted":false,"nextItem":{"title":"V4 Coming Up","permalink":"/blog/2022/03/03/v4-coming"}},"content":"A few months ago it was announced that [v4 was coming](/blog/2022/03/03/v4-coming). Well, that happened... and also [a bunch more releases](https://github.com/warpstreamlabs/bento/blob/main/CHANGELOG.md) since then. Now that the fundamentals have been tidied up considerably we\'re adding new features and they\'re coming in hot and heavy (and a bit sticky). Almost entirely parallel to this effort is the work on the new [Bento Studio](https://studio.benthos.dev), which is a visual application for creating, modifying and sharing Bento (and Bloblang) configs.\\n\\nThings are certainly moving fast. However, we\'ve clearly been lacking in the blog department. To remedy this here\'s a summary of all the stuff we would have blogged about if we had more time and bother.\\n\\n\x3c!--truncate--\x3e\\n\\n## Community Growth\\n\\nBento has now surpassed [150 contributors][contributors], and between our [discord and slack communities][community] we\'re steadily approaching 1,000 gossips, at which point we\'ll be too mainstream to be considered cool and hip. This site has daily traffic in the thousands and Bento itself is downloaded around 2,000 times per day. The [Jeffail youtube channel][jeffail-youtube], which features all of our Bento and stream processing related video content, is also growing steadily in both content and precious subscribers. I\'d promise none of this traffic is bots but I actually don\'t know.\\n\\nAnother major milestone reached is that I watched witlessly as my wife gave birth to a human child, she\'s never done that before. In order to support the incoherent squawker (and our new child) I took a month away from the project. If you\'re a keen follower of the open source work going on in Bento land then you\'ll be aware that it has historically been a mostly one-person show (me), but I\'m thrilled (perhaps a bit sour) to report that during my absence the project carried on at pretty much the same intense pace.\\n\\nThese are all signs that our codebase, community support and developer ecosystems are becoming more decentralised. This trend in growth is entirely organic (besides a few stickers sent to conferences) and mostly based on the volunteer effort of professionals that use Bento in their daily work. We\'re also blessed with a number of hobbyists getting involved just because they enjoy it, we\'ve tried sapping the fun out of the project but they just won\'t go away. For now I\'m still retaining absolute control over what gets merged but the bus factor is certainly becoming less significant.\\n\\nThe trends I\'m outlining here should be soothing for Bento fans, we\'re growing, we\'re managing the growth just fine, and you can safely bet on the project continuing on that path. Over the years some users (active or prospective) have expressed concern that Bento does not have an organisation around it with a pot of money, their worry being the longevity of the project is at risk. I\'ve obviously not agreed as I haven\'t yet sought after such a pot of money (more on that later in this post). Over time it has become easier to shrug those concerns off as we continue to move at a pace that\'d easily beat the expectations of any funded operation.\\n\\n## Bento Studio\\n\\nI\'ve been quietly working on [Bento Studio][benthos-studio] pretty much since the early years of Bento itself. The idea being a visual editing application to complement the development and running of Bento configs. What I like about having this exist as an entirely separate application is that the main project is still incentivised to make configuration as easy and intuitive as possible, we can\'t just rely on visual tooling to plug gaps in ergonomics or observability. This allows Studio to focus on lifting that experience up a few notches as an optional extra.\\n\\nIf you aren\'t familiar with it then here\'s a quick video introduction:\\n\\nimport ReactPlayer from \'react-player/youtube\';\\n\\n<div className=\'container margin-vert--lg\'>\\n  <div className=\'row row--no-gutters\'>\\n    <ReactPlayer\\n        className=\'col\'\\n        height=\'300px\'\\n        url=\'https://youtu.be/uvbp2LCmQMY\'\\n        controls={true}\\n    />\\n  </div>\\n</div>\\n\\nStudio is currently offered as an open beta with new stuff coming in constantly. The main directions we\'re heading in are:\\n\\n- More storage flexibility, including allowing you to use Studio to view and configure streams running in your own local deployments\\n- More execution visibility, better visuals and ability to dig into what\'s happening within a Bento configuration\\n- A smoother configuration experience for beginners, including wizards for building new stream pipelines\\n\\nYou may also have noticed that Bento Studio is not open source. This is because I believe Studio is a good bet at putting together a scalable monetisation strategy that complements the goals of the open source work rather than causing friction against it, a sort of golden path for building a business around an existing open source ecosystem. It will take a while to work out which features should be paid for, but there will always be a free tier that provides all the interesting bits.\\n\\n## Monetisation\\n\\nUh oh! He said monetisation, bag him! Monetising an open source project is a hefty topic and gets lots of people mad and sweaty, one far end of the spectrum believing it\'s entirely counter to the open source movement, the other end refusing to take seriously any project that _isn\'t_ monetised.\\n\\nThe reality is obviously that neither extreme holds merit. People need to eat and when projects reach a certain size the time required to maintain them goes well beyond the scope of a fun hobby, but conversely there\'s nothing preventing a non-funded project from outperforming a funded one even with enterpisey things like support and product stability. A common feedback we get is that our stability and support goes well beyond what people are used to even with paid products. So, given that and all the stuff I outlined at the beginning of this post, do we even need funding?\\n\\nWell yes, we do. In fact, as the main driving force behind Bento I\'ve been funded since day one, just not directly. I get returns from my Bento work in the form of job opportunities that feed back into the project, support contracts, issue bounties and sponsorships dotted throughout. This is a similar story for many open source maintainers, where if you keep yourself from burning out then a project can get very far indeed without needing to commit to a more scalable business model.\\n\\nThis set up has been working out just fine but it\'s far from ideal. I spend a lot of energy keeping these gigs going which could be much better spent growing a team around a paid product. This team would then steward and give back to the open source community and we would all win, the only losers being people that hate teams, products or the abstract concept of winning, or me as a person.\\n\\nMany may have jumped straight into the deep end and asked for VC funding up front. If/when we choose to go down that route we\'re locked in for the whole ride, where in abstract terms if that aforementioned golden path of monetisation gives us problems then we\'re going to be pressured into following a new path that prioritises the venture and not the open source. Well, that\'s life, every decision has risks and in reality we\'d still do well as a community in any outcome, but for now I\'ve been exploring that golden path and seeing how far I can get on my own.\\n\\nSo that\'s how we got to here, we have a ship that seems pretty much sea worthy and without any obligations or milestones to deliver. Dare I remain bootstrapped? Perhaps I should join a fleet? Do we finally rocket boost these salty decks and aim for the stars? Is that a dumb metaphor? Well keep checking this blog to find out a few months after all the Discord and Slack users do.\\n\\n## Supporting the Project\\n\\nThe longer this project remains sustainable without obligation the more we can experiment freely and independently. If you want to help stretch that progress further and maybe help keep us on the golden path then [get involved in the project][open-source], get your organisation to [sponsor my work][sponsor-jeffail], or consider some of the [paid support options][paid-support] we\'re currently offering.\\n\\n[benthos-studio]: https://studio.benthos.dev\\n[contributors]: https://github.com/warpstreamlabs/bento/graphs/contributors\\n[community]: /community\\n[jeffail-youtube]: https://www.youtube.com/c/Jeffail\\n[sponsor-jeffail]: https://github.com/sponsors/Jeffail\\n[open-source]: https://github.com/warpstreamlabs/bento\\n[paid-support]: /support#paid-services"},{"id":"/2022/03/03/v4-coming","metadata":{"permalink":"/blog/2022/03/03/v4-coming","source":"@site/blog/2022-03-03-v4-coming.md","title":"V4 Coming Up","description":"How to prepare","date":"2022-03-03T00:00:00.000Z","formattedDate":"March 3, 2022","tags":[{"label":"v4","permalink":"/blog/tags/v-4"}],"readingTime":5.705,"hasTruncateMarker":true,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"V4 Coming Up","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","description":"How to prepare","keywords":["v4","roadmap","go","golang","stream processor","ETL"],"tags":["v4"]},"unlisted":false,"prevItem":{"title":"What\'s Next for Bento?","permalink":"/blog/2022/11/07/whats-next"},"nextItem":{"title":"Go Plugins V2 are Ready","permalink":"/blog/2021/10/12/new-plugins-stable"}},"content":"The [v4 roadmap](/blog/2021/01/04/v4-roadmap) was outlined more than a year ago, in that time all the major features planned have been completed and released in backwards compatible ways into v3, leaving only the breaking changes left (the fun stuff).\\n\\nWe\'re now also at a point where the breaking changes that we want to include in v4 have been completed on a branch, and a migration guide is ready to use [which describes how to prepare for v4](/docs/guides/migration/v4). Therefore, it seems to me, that we\'re ready to actually prepare the release.\\n\\n\x3c!--truncate--\x3e\\n\\n## Why\\n\\nBento follows semantic versioning, which means a major version release is not necessarily an indication of significant improvements to the product, but an indication that things have changed and therefore upgrading should be done with care (and likely some effort). As such, all the major improvements that _could_ have been part of this release (config templates, new plugin APIs, etc) are already part of version 3 and being actively used.\\n\\nThe vast majority of these improvements have been an evolution or consolidation of prior features, which have since become deprecated (and hidden from the documentation). Doing things this way has enabled you to slowly learn about and adopt the nice new goodies whilst also running the old stuff. However, the reality is that the old deprecated features are a maintenance burden. Not only do we need to ensure that a growing number of potentially unused features remain bug free, but these features often frustrate or entirely prevent us from making improvements elsewhere.\\n\\nAs such, after keeping v3 going for more than two years, it feels like it\'s about the right time for spring cleaning. The absolute top priority of this release is to remove deprecated components, which for people keeping up with the newest features would in theory mean no breaking changes at all. However, since major releases are a rare event (this could possibly be the last one) it also makes sense to use this as an opportunity to change things about Bento that we feel aren\'t intuitive.\\n\\nThe biggest of these intentionally breaking changes is the way in which metrics work. Bento exposes a huge amount of metrics but the names can often be confusing and difficult to understand, and some components expose inconsistent or undocumented metrics. For v4 they have been massively simplified and made consistent, leaning on labels/tags for presenting (optionally) granular series, and allowing full customisation for all metric destination types with a generic `mapping` field.\\n\\nThe full list of changes we\'ve decided to add are outlined in the [the migration guide](/docs/guides/migration/v4), which is an attempt at finding a good balance between keeping to a minimal impact for the majority of users, and tackling the biggest culprits of confusion in Bento land. It\'s extremely important to stress that at this stage nothing is absolute, we can pull these changes back if they seem to heavy, and likewise we can push further if there\'s hunger for more. Ultimately, we need feedback in the coming weeks in order to get this right.\\n\\n## Timescales\\n\\nNone of this is set in stone but it currently looks as though we will have a release candidate available for v4 in the coming weeks. You can expect `edge` tagged docker images to include v4 changes soon, followed by an image tagged `4.0.0-rc1` and so on, at the same time there will be artifacts you can obtain from the github releases page: https://github.com/warpstreamlabs/bento/releases.\\n\\nAt this stage we\'ll be looking for general testing as well as feedback on the migration process. If you find yourself in a situation where a feature you rely upon in v3 is gone and you can\'t find an alternative in v4 then we want to hear about it as soon as possible. There will be a temporary website up with v4 documentation but the URL will change each time the docs are updated, so we\'ll post them in several of the [community spaces][community], make sure you\'re in one if you\'re interested in testing.\\n\\nWe\'ll likely be playing with release candidates for a few weeks, in which time any official releases we put out will be v3 patches for any bug fixes we\'ve added in the meantime. Once we\'re happy with release candidates the official v4 tag will be pushed, built and the documentation site will be bumped to represent v4. When this happens the domain v3.benthos.dev will be set up to contain the v3 documentation.\\n\\n## Preparing\\n\\nIf you\'re interested in minimizing the effort to migrate to v4 right now then the first thing worth doing is moving away from any deprecated components in your v3 configs. You can detect them by pulling the latest version of v3 and running the linter with the `--deprecated` flag:\\n\\n```sh\\nbenthos lint --deprecated ./configs/*.yaml\\n```\\n\\nThis will report any deprecated components and fields that you still have in your configs.\\n\\nNext, if you\'re using plugins or have a custom build of Bento then you need to ensure you\'re no longer using any of the packages within `./lib`, all of those packages are being removed in v4 in favour of the new `./public` packages. The plugin APIs within `./lib` all have a newer (and better) alternative, but if you were using some of the misc packages as helper libraries then copy them from the v3 branch into your codebase.\\n\\nThe metrics changes are likely to affect almost every deployment, it is recommended that you make the best use of the new labels and rework your dashboards. However, if in your case the dashboards are difficult to change then it is likely easier to use a `mapping` in your new v4 config to reproduce the metrics series your dashboards currently rely upon. In order to prepare for this it\'s worth making an inventory of each series you use, the labels they have, and preparing the mapping you\'ll need. The documentation for the new metrics system can be found here: https://github.com/warpstreamlabs/bento/blob/main/website/docs/components/metrics/about.md\\n\\nFinally, it\'s worth getting familiar with the changes outlined in [the migration guide](/docs/guides/migration/v4). There are breaking changes in some components, mostly default values being changed in order to make them more intuitive, but they should all be understood before upgrading in order to avoid unintended consequences.\\n\\n## Please Help\\n\\nIf you\'re interested in helping out then we\'d love to get you involved and the best way is to read the migration guide, try out the release candidates, and give us feedback in any of the [community spaces][community].\\n\\nThe major concern that we\'re looking for feedback on is whether the breaking changes are manageable for you, if you have identified things that will significantly hinder your migration then it\'s important we hear about it as soon as possible. This allows us to triage whether it\'s worth building tooling to help with the transition, or to potentially roll-back those changes if necessary.\\n\\n[community]: /community"},{"id":"/2021/10/12/new-plugins-stable","metadata":{"permalink":"/blog/2021/10/12/new-plugins-stable","source":"@site/blog/2021-10-12-new-plugins-stable.md","title":"Go Plugins V2 are Ready","description":"In case you didn\'t see the Tweets, Discord posts and Github activity","date":"2021-10-12T00:00:00.000Z","formattedDate":"October 12, 2021","tags":[{"label":"v4","permalink":"/blog/tags/v-4"},{"label":"plugins","permalink":"/blog/tags/plugins"}],"readingTime":0.3,"hasTruncateMarker":false,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"Go Plugins V2 are Ready","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","description":"In case you didn\'t see the Tweets, Discord posts and Github activity","keywords":["go","golang","stream processor","ETL"],"tags":["v4","plugins"]},"unlisted":false,"prevItem":{"title":"V4 Coming Up","permalink":"/blog/2022/03/03/v4-coming"},"nextItem":{"title":"Preview: Go Plugins V2 and Config Templates","permalink":"/blog/2021/06/02/new-plugins-and-templates"}},"content":"The [new plugin APIs](https://pkg.go.dev/github.com/warpstreamlabs/bento/v3/public/service) are ready to use, are being used, and [here\'s a video of them in action](https://youtu.be/uH6mKw-Ly0g).\\n\\nimport ReactPlayer from \'react-player/youtube\';\\n\\n<div className=\'container margin-vert--lg\'>\\n  <div className=\'row row--no-gutters\'>\\n    <ReactPlayer\\n        className=\'col\'\\n        height=\'300px\'\\n        url=\'https://www.youtube.com/embed/uH6mKw-Ly0g\'\\n        controls={true}\\n    />\\n  </div>\\n</div>\\n\\nThe full API docs can be found at [pkg.go.dev/github.com/warpstreamlabs/bento/v3/public](https://pkg.go.dev/github.com/warpstreamlabs/bento/v3/public), and there\'s an example repository demonstrating a few different component plugin types at [github.com/warpstreamlabs/bento-plugin-example](https://github.com/warpstreamlabs/bento-plugin-example)."},{"id":"/2021/06/02/new-plugins-and-templates","metadata":{"permalink":"/blog/2021/06/02/new-plugins-and-templates","source":"@site/blog/2021-06-02-new-plugins-and-templates.md","title":"Preview: Go Plugins V2 and Config Templates","description":"It\'s ready, now we need test subjects","date":"2021-06-02T00:00:00.000Z","formattedDate":"June 2, 2021","tags":[{"label":"v4","permalink":"/blog/tags/v-4"},{"label":"plugins","permalink":"/blog/tags/plugins"},{"label":"templates","permalink":"/blog/tags/templates"},{"label":"roadmap","permalink":"/blog/tags/roadmap"}],"readingTime":3.63,"hasTruncateMarker":true,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"Preview: Go Plugins V2 and Config Templates","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","description":"It\'s ready, now we need test subjects","keywords":["go","golang","stream processor","ETL"],"tags":["v4","plugins","templates","roadmap"]},"unlisted":false,"prevItem":{"title":"Go Plugins V2 are Ready","permalink":"/blog/2021/10/12/new-plugins-stable"},"nextItem":{"title":"Cross Post: We\'re Bringing Simple Back (to Streaming)","permalink":"/blog/2021/03/09/redpanda"}},"content":"I need help, attention and affirmation, and therefore it\'s time for a development update. Around five months ago I posted a [roadmap for Bento v4](/blog/2021/01/04/v4-roadmap) that included some utterly unattainable goals that only a super human could achieve.\\n\\nNow that most of those features are ready to test, namely a new plugins API and config templating, I\'m looking for people to try them out and give feedback. Please read on if that sounds like fun to you, or also if it doesn\'t sound fun but you intend to do it anyway.\\n\\n\x3c!--truncate--\x3e\\n\\n## Config Templates\\n\\nThe new config templates functionality allows you to define parameterised templates for Bento configuration snippets. These templates can then be imported with a cli flag and used in Bento configs like native Bento components.\\n\\nThis is going to be super useful in situations where you have commonly used configuration patterns with small differences that prevent you from using resources.\\n\\nThe current state of templates is that they\'ll be included in the next release as an experimental feature, meaning any aspect of this functionality is subject to change outside of major version releases. This includes the config spec of templates, how they work, and so on.\\n\\nDefining a template looks roughly like this:\\n\\n```yaml\\nname: log_message\\ntype: processor\\nsummary: Print a log line that shows the contents of a message.\\n\\nfields:\\n  - name: level\\n    description: The level to log at.\\n    type: string\\n    default: INFO\\n\\nmapping: |\\n  root.log.level = this.level\\n  root.log.message = \\"${! content() }\\"\\n  root.log.fields.metadata = \\"${! meta() }\\"\\n  root.log.fields.error = \\"${! error() }\\"\\n```\\n\\nAnd you\'re able to import templates with the `-t` flag:\\n\\n```sh\\nbenthos -t ./templates/foo.yaml -c ./config.yaml\\n```\\n\\nAnd using it in a config looks like any other component:\\n\\n```yaml\\npipeline:\\n  processors:\\n    - log_message:\\n        level: ERROR\\n```\\n\\nTo find out more about configuration templates, including how to try them out, check out [the new templates page][configuration.templating]. More importantly, you can give feedback on them [in this Github discussion][templates-feedback-thread].\\n\\n## The V2 Go Plugins API\\n\\nBento has had Go plugins for a while now and they\'re fairly well received. However, they can sometimes be confusing as they expose Bento internals that aren\'t necessary to understand as plugin authors.\\n\\nIt was also an issue for me as a maintainer that the current plugin APIs hook directly into Bento packages that have no business being public. This makes it extra difficult to improve the service without introducing breaking changes.\\n\\nThe new APIs are simpler, more powerful (in the ways that matter), add milk after the water, and most importantly are air-gapped from Bento internals so that they can evolve independently. Here\'s a sneaky glance of what a processor plugin looks like:\\n\\n```go\\ntype ReverseProcessor struct {\\n\\tlogger *service.Logger\\n}\\n\\nfunc (r *ReverseProcessor) Process(ctx context.Context, m *service.Message) ([]*service.Message, error) {\\n\\tbytesContent, err := m.AsBytes()\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\tnewBytes := make([]byte, len(bytesContent))\\n\\tfor i, b := range bytesContent {\\n\\t\\tnewBytes[len(newBytes)-i-1] = b\\n\\t}\\n\\n\\tif bytes.Equal(newBytes, bytesContent) {\\n\\t\\tr.logger.Infof(\\"Woah! This is like totally a palindrome: %s\\", bytesContent)\\n\\t}\\n\\n\\tm.SetBytes(newBytes)\\n\\treturn []*service.Message{m}, nil\\n}\\n\\nfunc (r *ReverseProcessor) Close(ctx context.Context) error {\\n\\treturn nil\\n}\\n\\nfunc main() {\\n\\terr := service.RegisterProcessor(\\n\\t\\t\\"reverse\\", service.NewConfigSpec(),\\n\\t\\tfunc(conf *service.ParsedConfig, mgr *service.Resources) (service.Processor, error) {\\n\\t\\t\\treturn &ReverseProcessor{logger: mgr.Logger()}, nil\\n\\t\\t})\\n\\tif err != nil {\\n\\t\\tpanic(err)\\n\\t}\\n\\n\\tservice.RunCLI()\\n}\\n```\\n\\nYou can play around with these APIs right now by pulling the latest commit with:\\n\\n```sh\\ngo get -u github.com/warpstreamlabs/bento/v3@master\\n```\\n\\nAnd you can find more examples along with the API docs at [pkg.go.dev][plugins.api].\\n\\nThe package will remain in an experimental state under `public/x/service` for a month or so, and once it\'s \\"ready\\" (I\'m personally happy with it) then it\'ll be moved to `public/service` and will be considered stable.\\n\\nThe goal is to allow everyone to migrate to the new APIs whilst still supporting the old ones, and then when Bento V4 is tagged the old ones will vanish and we\'re no longer blocked on them.\\n\\nSimilar to the templates there is [a Github discussion open for feedback][plugins-feedback-thread]. Be honest, be brutal.\\n\\n## Join the Community\\n\\nI\'ve been babbling on for months so if this stuff is news to you then you\'re clearly out of the loop. Worry not, for you can remedy the situation by joining one or more of our [glorious community spaces][community].\\n\\n[community]: /community\\n[configuration.templating]: /docs/configuration/templating\\n[plugins.api]: https://pkg.go.dev/github.com/warpstreamlabs/bento/v3/public/service\\n[templates-feedback-thread]: https://github.com/warpstreamlabs/bento/discussions/785\\n[plugins-feedback-thread]: https://github.com/warpstreamlabs/bento/discussions/754"},{"id":"/2021/03/09/redpanda","metadata":{"permalink":"/blog/2021/03/09/redpanda","source":"@site/blog/2021-03-09-redpanda.md","title":"Cross Post: We\'re Bringing Simple Back (to Streaming)","description":"(Cross-posted with https://vectorized.io/blog/benthos/)","date":"2021-03-09T00:00:00.000Z","formattedDate":"March 9, 2021","tags":[],"readingTime":3.12,"hasTruncateMarker":true,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"Cross Post: We\'re Bringing Simple Back (to Streaming)","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","keywords":["redpanda","stream processing","kafka"],"tags":[]},"unlisted":false,"prevItem":{"title":"Preview: Go Plugins V2 and Config Templates","permalink":"/blog/2021/06/02/new-plugins-and-templates"},"nextItem":{"title":"First Look at the V4 Roadmap","permalink":"/blog/2021/01/04/v4-roadmap"}},"content":"(Cross-posted with [https://vectorized.io/blog/benthos/](https://vectorized.io/blog/benthos/))\\n\\nCombining the power of Redpanda and Bento for your streaming needs is so simple that this blog post is almost over already.\\n\\n\x3c!--truncate--\x3e\\n\\n[Bento](https://www.benthos.dev/) is an open source stream processor that provides data mapping, filtering, hydration and enrichment capabilities across a wide range of connectors. It is driven by a minimal, declarative configuration spec, and with a transaction based architecture it eliminates the development effort of building resilient stream processing pipelines.\\n\\nLikewise, with its simplicity and high performance, Redpanda eliminates the operational effort of data persistence and availability by providing a Kafka-compatible streaming platform without the moving parts.\\n\\nWith so much taken care of you\'re well in for a boring, uneventful time when you combine the two. Make sure you\'ve grabbed a copy of both services, full instructions can be found in the [getting started guide for Bento](https://www.benthos.dev/docs/guides/getting_started) and [the Redpanda docs](https://vectorized.io/docs). In this post we\'ll be running them with Docker so we\'ll start by pulling both images:\\n\\n```\\ndocker pull vectorized/redpanda:latest\\ndocker pull jeffail/benthos:latest\\n```\\n\\nWe can then create a new network for the services to connect with:\\n\\n```\\ndocker network create -d bridge redpandanet\\n```\\n\\nNext, run Redpanda in the background, we\'ll go with a single node for now:\\n\\n```\\ndocker run -d \\\\\\n  --network redpandanet \\\\\\n  --name redpanda \\\\\\n  -p 9092:9092 \\\\\\n  vectorized/redpanda redpanda start \\\\\\n  --reserve-memory 0M \\\\\\n  --overprovisioned \\\\\\n  --smp 1 \\\\\\n  --memory 1G \\\\\\n  --advertise-kafka-addr redpanda:9092\\n```\\n\\nIn order to send data to Redpanda with Bento we\'ll need to create a config, starting off with a simple Stdin to Kafka pipeline, copy the following config into a file `producer.yaml`:\\n\\n```yaml\\ninput:\\n  stdin: {}\\n\\noutput:\\n  kafka:\\n    addresses: [ redpanda:9092 ]\\n    topic: topic_A\\n```\\n\\nPro tip: You can also use Bento itself to generate a config like this with `docker run --rm jeffail/benthos create stdin//kafka > ./producer.yaml`.\\n\\nAnd now run Bento by adding the config as a Docker volume, along with a pseudo-TTY for writing our messages:\\n\\n```\\ndocker run --rm -it \\\\\\n  --network redpandanet \\\\\\n  -v $(pwd)/producer.yaml:/benthos.yaml \\\\\\n  jeffail/benthos\\n```\\n\\nThis will open an interactive shell where you can write in some data to send. Bento will gobble up anything you throw at it, try mixing structured and unstructured messages, ending each message with a newline:\\n\\n```\\n{\\"id\\":\\"1\\",\\"data\\":\\"a structured message\\"}\\nbut this here ain\'t structured at all!\\n[{\\"id\\":\\"2\\"},\\"also structured in a different (but totally valid) way\\"]\\n```\\n\\nWhen you\'re finished hit CTRL+C and it\'ll exit.\\n\\nNext, let\'s try reading that data back out from Redpanda, this time let\'s also add a [processor](https://www.benthos.dev/docs/components/processors/about) in order to mutate our data, copy the following into a file `consumer.yaml`:\\n\\n```yaml\\ninput:\\n  kafka:\\n    addresses: [ redpanda:9092 ]\\n    topics: [ topic_A ]\\n    consumer_group: example_group\\n\\npipeline:\\n  processors:\\n    - bloblang: |\\n        root.doc = this | content().string()\\n        root.length = content().length()\\n        root.topic = meta(\\"kafka_topic\\")\\n\\noutput:\\n  stdout: {}\\n```\\n\\nAnd run it with our new config, and without the pseudo-TTY this time:\\n\\n```\\ndocker run --rm \\\\\\n  --network redpandanet \\\\\\n  -v $(pwd)/consumer.yaml:/benthos.yaml \\\\\\n  jeffail/benthos\\n```\\n\\nNow you should see it print mutated versions of the messages you sent to Stdout:\\n\\n```json\\n{\\"doc\\":{\\"data\\":\\"a structured message\\",\\"id\\":\\"1\\"},\\"length\\":40,\\"topic\\":\\"topic_A\\"}\\n{\\"doc\\":\\"but this here ain\'t structured at all!\\",\\"length\\":38,\\"topic\\":\\"topic_A\\"}\\n{\\"doc\\":[{\\"id\\":\\"2\\"},\\"also structured in a different (but totally valid) way\\"],\\"length\\":69,\\"topic\\":\\"topic_A\\"}\\n```\\n\\nThe [Bloblang processor](https://www.benthos.dev/docs/components/processors/bloblang) in our consumer config has remapped the original message to a new field `doc`, first attempting to extract it as a structured document, but falling back to a stringified version of it when it\'s unstructured. We\'ve also added a field `length` which contains the length of the original message, and `topic` which contains the Kafka topic the message was consumed from.\\n\\nThat\'s it for now, if you\'re still hungry for more then check out the Bento website at [https://www.benthos.dev](https://www.benthos.dev/), and you can learn more about the Bento mapping language Bloblang [in this guide](https://www.benthos.dev/docs/guides/bloblang/about)."},{"id":"/2021/01/04/v4-roadmap","metadata":{"permalink":"/blog/2021/01/04/v4-roadmap","source":"@site/blog/2021-01-04-v4-roadmap.md","title":"First Look at the V4 Roadmap","description":"Well, it\'s roadmapish","date":"2021-01-04T00:00:00.000Z","formattedDate":"January 4, 2021","tags":[{"label":"v4","permalink":"/blog/tags/v-4"}],"readingTime":6.46,"hasTruncateMarker":true,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"First Look at the V4 Roadmap","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","description":"Well, it\'s roadmapish","keywords":["v4","roadmap","go","golang","stream processor","ETL"],"tags":["v4"]},"unlisted":false,"prevItem":{"title":"Cross Post: We\'re Bringing Simple Back (to Streaming)","permalink":"/blog/2021/03/09/redpanda"},"nextItem":{"title":"Powered Up Workflows","permalink":"/blog/2020/08/30/improved-workflows"}},"content":"Bento has been at major version 3 for over a year now, and I consider it to be a pretty cool achievement that given [all the great features added](https://github.com/warpstreamlabs/bento/blob/master/CHANGELOG.md) we\'ve managed to keep both the Bento config spec and APIs fully backwards compatible.\\n\\nHowever, eventually it would be nice to cut a new major release and prune all of the dead weight that has accumulated during this time. Since major version releases don\'t come often I wanted to be sure that we\'ve considered and planned any other potential breaking changes that could be bundled along with it.\\n\\n\x3c!--truncate--\x3e\\n\\nUp until now Bento has never had a roadmap or really any plan beyond just building what we want to use or want to build, this is known in the industry as attention-span-driven development. Alas, if we\'re going to get mileage out of version 4 then _some_ planning is necessary, and I figured we might as well put together our very first roadmap.\\n\\nA few months ago I [asked for feedback][feedback-thread], I already had my own wish list of things to change in the next major release but I wanted to give you all an opportunity to factor in your own use cases. I\'ve attempted to capture all of the feedback and create issues for the stuff that\'s achievable, then I marked the issues that require breaking changes and added them to my roadmap plans. I think it\'s currently in a state that works for me and is something deliverable, therefore I think it\'s now worth sharing and allowing you all to help shape it further.\\n\\nBento is blessed with a decent and growing number of contributors. However, it\'s still clear that if I personally were to burn out then the project would pretty much grind to a temporary halt, and therefore my sanity is a higher priority than committing to a rigid plan. Here\'s a few things to clarify about this roadmap before you get too excited:\\n\\n1. This isn\'t final, it\'s going to mutate over time in order to flex around \\"everything else\\" going on.\\n2. This isn\'t everything. The only items included in this roadmap are items that I consider required to have ready for v4. Any features that can definitely be implemented without breaking changes are not included and can be worked on at any time, including right now.\\n3. There is no timeline or estimate for this work (by design). If you are blocked on any of the items on this roadmap and aren\'t able to contribute then please still make sure I\'m aware and I\'ll factor that in, but do not expect promises or commitments (unless you\'re paying for them).\\n\\nWith that made clear and everyone sufficiently bored let\'s get into the planned work _as it currently stands_. I\'ve created an issue for every item here where you can read more details beyond my elevator pitch.\\n\\n### Improved plugin APIs\\n\\n[Click here to access the issue.](https://github.com/warpstreamlabs/bento/issues/501)\\n\\nThis is by far the biggest item of work I want to establish _before_ v4. The plugin APIs are currently heavily tied into the same component interfaces that are used internally. This means that it\'s not possible for me to modify the signatures of internal components without breaking the plugin APIs. This has historically put us in awkward positions where in order to make a change that\'s backwards compatible with both our configuration spec and the plugin APIs we have to implement nasty tricks.\\n\\nIf we\'re instead able to isolate the plugin APIs with an air gap then it will allow us to iterate on the internal components without impacting the APIs used for plugins.\\n\\nThe plan is to fully implement an isolated (and nicer) plugin API, give everyone a lot of time to try it out, provide feedback, and migrate, all within good time _before_ v4 so that I don\'t pull the rug out from under current plugin users.\\n\\n### Streams Mode API for Resources\\n\\n[Click here to access the issue.](https://github.com/warpstreamlabs/bento/issues/566)\\n\\nThis one\'s pretty simple, we want to expand the streams mode APIs to allow the mutation of resources. This is blocked behind a breaking change (to the plugin APIs) as it would require sweeping changes to how resources are accessed.\\n\\n### Input Scheduling Capabilities\\n\\n[Click here to access the issue.](https://github.com/warpstreamlabs/bento/issues/580)\\n\\nSometimes it\'s nice to slow things down, this issue would allow us to configure inputs that are triggered in scheduled bursts rather than realtime streams in order to have them behave similar to batch processors. Implementing this will require a minor review of the input initialization flow, which could potentially lead to breaking changes to the internal API.\\n\\n### Configuration Templating\\n\\n[Click here to access the issue.](https://github.com/warpstreamlabs/bento/issues/590)\\n\\nThis would allow you to create reusable, parameterized, configuration templates and have them natively supported within Bento. This issue is pretty great but also a significant amount of work, it could easily result in breaking changes being required and so I\'d like to have this at least planned out and understood before v4.\\n\\n### Improved Logging\\n\\n[Click here to access the issue.](https://github.com/warpstreamlabs/bento/issues/589)\\n\\nAs Bento has evolved it has gained a few oddities in how logging works. This issue adjusts logging to lean more into structured logging fields and update the configuration defaults to be more sensible. This will mostly impact internal components that create logs, and therefore depends on having the isolated plugin APIs.\\n\\n### Improved Metrics\\n\\n[Click here to access the issue.](https://github.com/warpstreamlabs/bento/issues/510)\\n\\nSimilar to the logging issue, metrics in Bento are a bit wonky due to the collision between targets that do and don\'t support labels/tagging. Since Prometheus and other tag based metrics types seem to be winning out nowadays I think we can flip the defaults to favour tags over long metric names.\\n\\n### Configuration File Reloading\\n\\n[Click here to access the issue.](https://github.com/warpstreamlabs/bento/issues/338)\\n\\nPretty much self explanatory. I believe this can be implemented without any breaking changes, but it would be good to have it understood (or finished) before v4 just in case.\\n\\n## Tracking these Features\\n\\nThere\'s a [project on Github][v4-project] containing all of these issues, but the way that I\'ve configured it is unique as issues aren\'t necessarily tracked by their progress. Issues in the \\"Blocked\\" column are unable to progress without a breaking change and therefore are blocked on v4. Issues in the \\"Unblocked\\" column are features that can be worked on, and will either become done if they were able to be completed without breaking changes, or will be put back into \\"Blocked\\" once they reach a point where breaking changes are needed.\\n\\nOnce the \\"Unblocked\\" column has been emptied, and all of our v4 issues are either blocked or done, that will indicate that we are ready to commit to a new major version release, at which point a v4 branch will be created and that work can be started.\\n\\nI\'m hoping that this will make it easier for me to minimize disruption. Ideally, I want the process of implementing Bento v4 to be a simple case of deleting old deprecated stuff, and then removing flags/feature toggles in order to make new breaking features the default, having already been implemented and tested. There should be no green field work as part of the new v4 branch.\\n\\n## What\'s Next\\n\\nMake sure you get your thoughts and opinions added to the issues you\'re interested in. I\'m also going to try and open up mini forums over [our Discord server][community] to get feedback on the plans. If any of these issues are something you\'d personally like then please add a thumbs up emoji to it, as that helps me prioritize them.\\n\\nIf you\'re interested in getting involved then make sure you\'ve joined one or more of our [glorious community spaces][community].\\n\\n[changelog]: https://github.com/warpstreamlabs/bento/blob/master/CHANGELOG.md\\n[community]: /community\\n[v4-project]: https://github.com/warpstreamlabs/bento/projects/2\\n[feedback-thread]: https://github.com/warpstreamlabs/bento/issues/503"},{"id":"/2020/08/30/improved-workflows","metadata":{"permalink":"/blog/2020/08/30/improved-workflows","source":"@site/blog/2020-08-30-improved-workflows.md","title":"Powered Up Workflows","description":"Available in v3.26.0","date":"2020-08-30T00:00:00.000Z","formattedDate":"August 30, 2020","tags":[{"label":"Workflows","permalink":"/blog/tags/workflows"}],"readingTime":3.38,"hasTruncateMarker":true,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"Powered Up Workflows","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","description":"Available in v3.26.0","keywords":["benthos","workflows","go","golang","stream processor","enrichments"],"tags":["Workflows"]},"unlisted":false,"prevItem":{"title":"First Look at the V4 Roadmap","permalink":"/blog/2021/01/04/v4-roadmap"},"nextItem":{"title":"Bloblang Beta","permalink":"/blog/2020/05/10/bloblang-beta"}},"content":"For the last few weeks I\'ve been working on improving the workflow story in Bento. That means reducing the number of processors, simplifying them, and at the same time making them more powerful than before. The new functionality outlined here can be used in the latest release [v3.26.0](https://github.com/warpstreamlabs/bento/releases/tag/v3.26.0).\\n\\n\x3c!--truncate--\x3e\\n\\n## The Motivation\\n\\nAfter similar efforts to [improve the mapping story][post.bloblang-beta] in Bento it seemed sensible to target workflows. Specifically, I\'ve added a new [`branch` processor][processor.branch] for wrapping child processors in request/result maps, and have reworked the [`workflow` processor][processor.workflow] to use them.\\n\\nIf you haven\'t used workflows in Bento then there\'s a section in the new [`workflow` processor][processor.workflow.why] page outlining why they\'re useful. In short, when performing multiple integrations within a pipeline such as hitting HTTP services, lambdas, caches, etc, it\'s best to perform them in parallel when possible in order to reduce the processing latency of messages, organizing these integrations into a topology with a workflow makes it easier to manage their interdependencies and ensure they\'re executed in the right order.\\n\\nIn the old world you could use the `process_dag` processor which has child `process_map` processors, where the mappings were a series of clunky to/from [dot paths][configuration.field_paths], separated into optional and non-optional mappings. There was no way to manually specify the dependency tree, and conditional flows required a separate list of conditions which didn\'t factor into dependency resolution.\\n\\nHaving such complex and brittle mapping capabilities meant these processors were difficult to document and more so to understand and use.\\n\\n## Leaning into Bloblang\\n\\nThankfully, with [Bloblang][guides.bloblang] now finished it was pretty easy to replace most of the complexity of the workflow mappings for the language itself.\\n\\nFor example, when mapping the request payload for an integration you can express a bunch of different patterns...\\n\\nEmpty request body:\\n\\n```yaml\\nrequest_map: root = \\"\\"\\n```\\n\\nSub-object (`foo`) as request body, if the sub-object doesn\'t exist (or is null) the integration is abandoned:\\n\\n```yaml\\nrequest_map: root = this.foo.not_null()\\n```\\n\\nSub-object as request body which can be obtained from one of a number of possible paths:\\n\\n```yaml\\nrequest_map: root = this.(foo | bar | baz).doc.not_null()\\n```\\n\\nConditional integration applies when the `type` is `foo`, with an unmodified message as request body:\\n\\n```yaml\\nrequest_map: |\\n  root = if this.type != \\"foo\\" {\\n    deleted()\\n  }\\n```\\n\\nConditional integration applies when the `type` is `foo`, with a sub-object as the request body:\\n\\n```yaml\\nrequest_map: |\\n  root = if this.type == \\"foo\\" {\\n    this.foo.not_null()\\n  } else {\\n    deleted()\\n  }\\n```\\n\\nSimilarly, it\'s possible to express a bunch of things in the result mapping...\\n\\nDiscard the result (the original message is unchanged):\\n\\n```yaml\\nresult_map: \\"\\"\\n```\\n\\nPlace the entire result at a path:\\n\\n```yaml\\nresult_map: root.foo = this\\n```\\n\\nPlace the result in a metadata field:\\n\\n```yaml\\nresult_map: meta foo = this\\n```\\n\\nIf you want to see what it looks like there is an [enrichment cookbook][cookbook.enrichment] that demonstrates workflows in action, but there are also smaller examples on the [workflow page][processor.workflow.examples] such as the following snippet:\\n\\n```yaml\\npipeline:\\n  processors:\\n    - workflow:\\n        meta_path: meta.workflow\\n        branches:\\n          foo:\\n            request_map: \'root = \\"\\"\'\\n            processors:\\n              - http:\\n                  url: TODO\\n            result_map: \'root.foo = this\'\\n\\n          bar:\\n            request_map: \'root = this.body\'\\n            processors:\\n              - lambda:\\n                  function: TODO\\n            result_map: \'root.bar = this\'\\n\\n          baz:\\n            request_map: |\\n              root.fooid = this.foo.id\\n              root.barstuff = this.bar.content\\n            processors:\\n              - cache:\\n                  resource: TODO\\n                  operator: set\\n                  key: ${! json(\\"fooid\\") }\\n                  value: ${! json(\\"barstuff\\") }\\n```\\n\\n## Conclusion\\n\\nThe docs have been updated to use these new goodies. Obviously the old processors are still being maintained but in a mostly dormant state. The workflow and branch processors are currently labelled as `beta`, but their general behavior is stable with the only exceptions being odd edge cases that might arise.\\n\\nWith the behavior of these processors being dramatically simplified I\'ve also been able to simplify the documentation for them, which also means using more space on the page for example configs.\\n\\nIf you have feedback then [get the absolute heck in the chat you utter recluse][community].\\n\\n[processor.workflow]: /docs/components/processors/workflow/\\n[processor.branch]: /docs/components/processors/branch/\\n[processor.workflow.why]: /docs/components/processors/workflow/#why-use-a-workflow\\n[processor.workflow.examples]: /docs/components/processors/workflow/#examples\\n[post.bloblang-beta]: /blog/2020/05/10/bloblang-beta/\\n[configuration.field_paths]: /docs/configuration/field_paths/\\n[cookbook.enrichment]: /cookbooks/enrichments/\\n[guides.bloblang]: /docs/guides/bloblang/about/\\n[community]: /community/"},{"id":"/2020/05/10/bloblang-beta","metadata":{"permalink":"/blog/2020/05/10/bloblang-beta","source":"@site/blog/2020-05-10-bloblang-beta.md","title":"Bloblang Beta","description":"Available in v3.13","date":"2020-05-10T00:00:00.000Z","formattedDate":"May 10, 2020","tags":[{"label":"Bloblang","permalink":"/blog/tags/bloblang"}],"readingTime":1.285,"hasTruncateMarker":true,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"Bloblang Beta","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","description":"Available in v3.13","keywords":["benthos","bloblang","go","golang","stream processor","mapping"],"tags":["Bloblang"]},"unlisted":false,"prevItem":{"title":"Powered Up Workflows","permalink":"/blog/2020/08/30/improved-workflows"},"nextItem":{"title":"Sneak Peek at Bloblang","permalink":"/blog/2020/04/18/sneak-peek-at-bloblang"}},"content":"As of this weekend (and [Bento v3.13](https://github.com/warpstreamlabs/bento/releases/tag/v3.13.0)) you can now use a [`bloblang` processor](/docs/components/processors/bloblang) and complementary condition. These components are in a beta phase, which means that based on feedback the mapping language might change in minor ways in upcoming minor releases.\\n\\n\x3c!--truncate--\x3e\\n\\n## The Motivation\\n\\n[In the last post][post.sneak_peek] I outlined my motivations for experimenting with a mapping language. Words are stupid and boring and so to illustrate why a mapping language kicks ass here\'s a config example using the old processors compared to the new one. Keep in mind that the new version is simpler _and_ performs better.\\n\\nUsing old processors:\\n\\n```yaml\\npipeline:\\n  processors:\\n  - metadata:\\n      operator: set\\n      key: bar\\n      value: ${!json_field:foo.bar} \\n\\n  - json:\\n      operator: delete\\n      path: foo.bar\\n\\n  - json:\\n      operator: set\\n      path: foo.topic\\n      value: ${!metadata:topic} \\n\\n  - metadata:\\n      operator: delete\\n      key: topic\\n\\n  - conditional:\\n      condition:\\n        jmespath:\\n          query: \\"foo.baz == \'thing\'\\"\\n      processors:\\n      - json:\\n          operator: set\\n          path: foo.thing_id\\n          value: ${!uuid_v4}\\n```\\n\\nUsing Bloblang:\\n\\n```yaml\\npipeline:\\n  processors:\\n  - bloblang: |\\n      root = this\\n\\n      foo.topic = meta(\\"topic\\")\\n      meta topic = deleted()\\n\\n      meta bar = foo.bar\\n      foo.bar = deleted()\\n\\n      foo.thing_id = match {\\n        foo.baz == \\"thing\\" => uuid_v4()\\n      }\\n```\\n\\nMy ultimate intention is to completely eradicate the need for a `json`, `metadata` and `text` processor, as well as a range of others. However, I\'ll need as much help as possible to get the language right, so please consider testing and feeding back on [Github][gh.issues], the [Gitter channel][gitter], or event @ me [on Twitter][twitter] for the good of blobkind.\\n\\n[processor.bloblang]: /docs/components/processors/bloblang\\n[post.sneak_peek]: /blog/2020/04/18/sneak-peek-at-bloblang\\n[gh.issues]: https://github.com/warpstreamlabs/bento/issues/439/\\n[gitter]: https://gitter.im/jeffail-benthos/community\\n[twitter]: https://twitter.com/Jeffail"},{"id":"/2020/04/18/sneak-peek-at-bloblang","metadata":{"permalink":"/blog/2020/04/18/sneak-peek-at-bloblang","source":"@site/blog/2020-04-18-sneak-peek-at-bloblang.md","title":"Sneak Peek at Bloblang","description":"An experiment in mapping languages","date":"2020-04-18T00:00:00.000Z","formattedDate":"April 18, 2020","tags":[{"label":"Bloblang","permalink":"/blog/tags/bloblang"}],"readingTime":4.655,"hasTruncateMarker":true,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"Sneak Peek at Bloblang","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","description":"An experiment in mapping languages","keywords":["benthos","bloblang","go","golang","stream processor","mapping"],"tags":["Bloblang"]},"unlisted":false,"prevItem":{"title":"Bloblang Beta","permalink":"/blog/2020/05/10/bloblang-beta"},"nextItem":{"title":"Write a Bento Plugin","permalink":"/blog/2019/08/20/write-a-benthos-plugin"}},"content":"For the last few weekends I\'ve been dipping my toes in a mapping language design that I\'m calling Bloblang. Bloblang is specifically designed for data queries and (eventually) structural data mappings. In Bento version 3.12, which I\'m planning to release today, you can play around with a limited feature set of Bloblang by using it in [function interpolations](/docs/configuration/interpolation).\\n\\n\x3c!--truncate--\x3e\\n\\n## Why\\n\\nMy life has no meaning. Also, mapping is one of the most common boring tasks in stream and event processing. Given Bento is meant to specialise in the boring and mundane it makes sense to treat mapping as a first class citizen.\\n\\nUp until now the story for mapping documents in Bento has been to use [JMESPath][processor.jmespath], [AWK][processor.awk] or a string of the general purpose JSON processors. Time and time again it has been made apparent that it ain\'t good enough for many use cases.\\n\\nI should mention at this point that there\'s also the option of [IDML][idml], and although Bento hasn\'t supported it internally there is a solution to [running it in your pipeline][processor.subprocess].\\n\\nFor the last few years I\'ve been helping users adopt these options and each time they fall short I\'ve taken note of where the gaps are. This is an important part of the \\"research\\" phase for a language, but I also don\'t want to dwell on it. Here\'s an insultingly terse summary of what we currently have within Bento.\\n\\n### JMESPath\\n\\nThe spiritual cousin of [jq][jq], [JMESPath][jmespath] is a great spec for mapping JSON documents, especially so when your intention is to outright replace the original document.\\n\\nHowever, when our goal is to preserve the majority of the existing document, and we only wish to express isolated mutations within the structure, it becomes ugly and risky. For example, changing just `foo.bar.baz` to `this value` looks like this:\\n\\n```\\nmerge(@, {\\n  \\"foo\\": merge(foo, {\\n\\t  \\"bar\\": merge(bar, {\\n\\t    \\"baz\\": \\"this value\\"\\n\\t  })\\n  })\\n})\\n```\\n\\nHopefully you don\'t add a typo there or miss on a `merge`, otherwise you\'re scrapping a large chunk of your original document!\\n\\nExpressing your entire map in one single object also scales pretty poorly as the mapping grows in complexity.\\n\\nA final and Bento specific issue is that JMESPath only supports mapping the content of Bento messages, without the ability to modify or reference the metadata of a message or other messages of a batch, which would be great for [windowed processing][windowed-processing].\\n\\n### AWK\\n\\nBento has an [AWK processor][processor.awk], and since this is a proper programming language it has uses far beyond mapping. However, this also makes it riskier to use for large and complex maps. More opportunities to write bugs, more opportunities to break your program, more opportunities to regress.\\n\\nA simpler language specifically designed for mappings is a much more scalable solution as it reduces the opportunities for mistakes as both maps and teams grow. Although, risk aside, the major problem with using AWK within Bento is the performance hit.\\n\\n### JSON Processor\\n\\nThe JSON processor is pretty flexible and would be the highest performer of all options here. However, beyond one or two mutations a mapping becomes an absolute mess of YAML, and if we need to add conditional maps into the mix it becomes much worse.\\n\\nIt has been clear to me for a while that this processor is so quickly and easily outgrown by a typical user config that it perhaps ought to be entirely replaced with a real mapping solution.\\n\\n### IDML\\n\\nIf I could run [IDML][idml] natively from Bento then Bloblang wouldn\'t be happening. In my opinion [IDML][idml] is a criminally underused technology and absolutely nails the issue of mapping data at scale.\\n\\nSimilar to JMESPath the language itself doesn\'t have a concept of metadata, or querying across multiple documents (a batch). The issue I had here was that if I were going to go through the trouble of implementing IDML in Go I might as well add metadata and cross-batch querying, making it a different language anyway.\\n\\nHowever, I\'m definitely writing Bloblang with IDML in mind, and if I manage to reach feature parity with IDML then I intend to break it out into its own lib and offer it to the org, with my Bloblang extensions as Bento specific plugins.\\n\\n## Features\\n\\nSo with that in mind what does Bloblang look like? Right now we only have queries, which is the \\"right hand side\\" of a mapping. These queries support literals:\\n\\n```\\n\\"string literal\\"\\ntrue\\n93435.45\\n```\\n\\nAnd arithmetic:\\n\\n```\\n50 + 34\\n(\\"this\\" == \\"that\\") || (\\"that\\" == \\"that\\")\\n```\\n\\nAnd functions:\\n\\n```\\njson(\\"foo.bar.baz\\")\\nmeta(\\"kafka_key\\")\\ntimestamp_unix()\\n```\\n\\nAnd methods, which are attached to a function or value:\\n\\n```\\njson(\\"foo.bar.baz\\").from_all().sum()\\n```\\n\\nAnd path literals with coalescing:\\n\\n```\\njson().foo.(bar | something_else).baz\\n```\\n\\n## Next Steps\\n\\nIn terms of core syntaxes Bloblang is basically complete. It\'s implemented using parser combinators, and is very easy for me to extend with new functions and methods. Soon I\'ll expand Bloblang to support left hand query targets, which is when it really becomes a mapping language. It\'ll look something like this:\\n\\n```yaml\\npipeline:\\n  processors:\\n  - bloblang:\\n      mapping: |\\n        json.foo.bar = json().(something + another.thing)\\n        json.and_this = meta(\\"kafka_key\\").base64()\\n```\\n\\nAnd I\'ll also add a `condition` type for expressing logic as a Bloblang query:\\n\\n```yaml\\npipeline:\\n  processors:\\n  - filter_parts:\\n      bloblang:\\n        query: |\\n          (meta(\\"kafka_topic\\") == \\"junk\\") &&\\n            json().foo.(bar | baz.quz).id.contains(\\"blah\\")\\n```\\n\\nUntil I\'m allowed to practice with my professional rock paper scissors team again I\'m sure each weekend will deliver something new to the world of Bloblang.\\n\\n[function-interpolations]: /docs/configuration/interpolation\\n[windowed-processing]: /docs/configuration/windowed_processing\\n[processor.jmespath]: /docs/components/processors/jmespath\\n[processor.awk]: /docs/components/processors/awk\\n[idml]: https://idml.io/\\n[processor.subprocess]: /docs/components/processors/subprocess\\n[jq]: https://stedolan.github.io/jq/\\n[jmespath]: https://jmespath.org/"},{"id":"/2019/08/20/write-a-benthos-plugin","metadata":{"permalink":"/blog/2019/08/20/write-a-benthos-plugin","source":"@site/blog/2019-08-20-write-a-benthos-plugin.md","title":"Write a Bento Plugin","description":"I made it difficult for our job security","date":"2019-08-20T00:00:00.000Z","formattedDate":"August 20, 2019","tags":[{"label":"Plugins","permalink":"/blog/tags/plugins"}],"readingTime":6.93,"hasTruncateMarker":true,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"Write a Bento Plugin","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","description":"I made it difficult for our job security","keywords":["benthos","plugin","go","golang","stream processor"],"tags":["Plugins"]},"unlisted":false,"prevItem":{"title":"Sneak Peek at Bloblang","permalink":"/blog/2020/04/18/sneak-peek-at-bloblang"},"nextItem":{"title":"Introducing Bento Lab","permalink":"/blog/2019/06/17/introducing-benthos-lab"}},"content":"I\'m going to walk you through writing a Bento plugin from scratch in Go.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nToo lazy to read? You can find a video equivalent of this post at: [https://youtu.be/Ilah_Y0uMk4](https://youtu.be/Ilah_Y0uMk4). If you prefer to dig straight into code then you should check out the [benthos-plugin-example][plugin-repo] repo.\\r\\n\\r\\n![benthos-plugged](/img/write-a-benthos-plugin/benthos-plugged.png)\\r\\n\\r\\nPlugins allow you to embed your code within Bento as a component. [Processors][benthos-proc] are the most common type of component to get plugged, which is what we\'re going to do in this post. If you want to run non-Go code from Bento then you still have options, such as the [`subprocess`][subprocess-proc], [`http`][http-proc] or [`lambda`][lambda-proc] processors.\\r\\n\\r\\n## Roleplay\\r\\n\\r\\nImagine you are a competent engineer. You wrote a function to detect sarcasm in internet posts on a linear scale of 0 to 100:\\r\\n\\r\\n```go\\r\\n// HowSarcastic TOTALLY detects sarcasm EVERY time.\\r\\nfunc HowSarcastic(content []byte) float64 {\\r\\n\\tif bytes.Contains(content, []byte(\\"/s\\")) {\\r\\n\\t\\treturn 100\\r\\n\\t}\\r\\n\\treturn 0\\r\\n}\\r\\n```\\r\\n\\r\\nYou are confident that `HowSarcastic` is 100% accurate and wish to apply it to a continuous stream of data by deploying it within a stream processing solution.\\r\\n\\r\\nYou want this service to be resilient with at-least-once delivery guarantees, scalable both horizontally and vertically, and able to expose various metrics about the health of the data stream.\\r\\n\\r\\nYou have decided to use Bento for this service because you love the logo.\\r\\n\\r\\n![charming-benthos-logo](/img/write-a-benthos-plugin/blobfish.jpg)\\r\\n\\r\\n### Stuff you don\'t need to care about yet\\r\\n\\r\\nSince you are using Bento you don\'t need to choose a queue system, metrics aggregator or deployment platform yet, those items can be configured.\\r\\n\\r\\nYou don\'t even need to know what format the data comes in or how it needs to look when it leaves your service, as Bento [has plenty of processors][processors] for configuring that stuff on the fly.\\r\\n\\r\\n## Getting Started\\r\\n\\r\\nYou\'re going to use Go modules for this one, make a directory and create a `go.mod` file:\\r\\n\\r\\n```sh\\r\\nmkdir foo && cd foo\\r\\ngo mod init github.com/bar/foo\\r\\n```\\r\\n\\r\\nNext, you need to pull in your only dependency, [Bento][benthos-repo]:\\r\\n\\r\\n```sh\\r\\ngo get github.com/warpstreamlabs/bento/v3\\r\\n# Look! Now you have more dependencies than friends!\\r\\n```\\r\\n\\r\\nThat\'ll automatically add the dep to your `go.mod` file at the latest v3 tag. Next, you\'re going to write your stream processor service. Write this to the file `main.go`:\\r\\n\\r\\n```go\\r\\npackage main\\r\\n\\r\\nimport (\\r\\n    \\"github.com/warpstreamlabs/bento/v3/lib/service\\"\\r\\n)\\r\\n\\r\\nfunc main() {\\r\\n    service.Run()\\r\\n}\\r\\n```\\r\\n\\r\\nThat\'s it, you\'ve got a full Bento. If you want to verify then you can run it:\\r\\n\\r\\n```sh\\r\\ngo run ./main.go --help\\r\\n```\\r\\n\\r\\n## Write Your Plugin\\r\\n\\r\\nNow you will write the actual plugin that executes your function. Processor plugins implement [`types.Processor`][types-processor] and have the signature:\\r\\n\\r\\n```go\\r\\nfunc ProcessMessage(msg types.Message) ([]types.Message, types.Response)\\r\\n```\\r\\n\\r\\nA message can have multiple parts (synonymous with a batch) and we are allowed to return either one or more messages or a response which is either an ack or noack.\\r\\n\\r\\nA message part has both content and any number of metadata key/value pairs. It is therefore up to you as to whether you modify the contents of messages or whether the sarcasm level is added as metadata.\\r\\n\\r\\nThankfully you don\'t need to make that decision now. Instead, you\'re going to expose it as a config field and support both. The config field will be called `metadata_key`, and if left empty the contents of messages will be replaced entirely with the sarcasm level.\\r\\n\\r\\nThere won\'t be much code needed so for brevity you are going to write this straight into your `main.go` file:\\r\\n\\r\\n```go\\r\\n// SarcasmProc applies our sarcasm detector to messages.\\r\\ntype SarcasmProc struct {\\r\\n\\tMetadataKey string `json:\\"metadata_key\\" yaml:\\"metadata_key\\"`\\r\\n}\\r\\n\\r\\n// ProcessMessage returns messages mutated with their sarcasm level.\\r\\nfunc (s *SarcasmProc) ProcessMessage(msg types.Message) ([]types.Message, types.Response) {\\r\\n\\tnewMsg := msg.Copy()\\r\\n\\r\\n\\tnewMsg.Iter(func(i int, p types.Part) error {\\r\\n\\t\\tsarcasm := HowSarcastic(p.Get())\\r\\n\\t\\tsarcasmStr := strconv.FormatFloat(sarcasm, \'f\', -1, 64)\\r\\n\\r\\n\\t\\tif len(s.MetadataKey) > 0 {\\r\\n\\t\\t\\tp.Metadata().Set(s.MetadataKey, sarcasmStr)\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tp.Set([]byte(sarcasmStr))\\r\\n\\t\\t}\\r\\n\\t\\treturn nil\\r\\n\\t})\\r\\n\\r\\n\\treturn []types.Message{newMsg}, nil\\r\\n}\\r\\n\\r\\n// CloseAsync does nothing.\\r\\nfunc (s *SarcasmProc) CloseAsync() {}\\r\\n\\r\\n// WaitForClose does nothing.\\r\\nfunc (s *SarcasmProc) WaitForClose(timeout time.Duration) error {\\r\\n\\treturn nil\\r\\n}\\r\\n```\\r\\n\\r\\nLet\'s break this down. You have a struct called `SarcasmProc`, which contains a configuration field `MetadataKey`. The functions `CloseAsync` and `WaitForClose` can be ignored as your processor doesn\'t contain any state that requires termination.\\r\\n\\r\\nWithin your function `ProcessMessage` you iterate all the payloads within the message batch and calculate the sarcasm level with your function `HowSarcastic`. The result is converted into a string and, depending on whether a metadata key has been set, replaces the contents with the result or sets a new metadata value on the payload.\\r\\n\\r\\nThat\'s your processor completed. Now you need to register the plugin before calling `service.Run`. Since this is a processor plugin you\'re going to call [`processor.RegisterPlugin`][proc-register-plugin]:\\r\\n\\r\\n```go\\r\\nfunc main() {\\r\\n\\tprocessor.RegisterPlugin(\\r\\n\\t\\t\\"how_sarcastic\\",\\r\\n\\t\\tfunc() interface{} {\\r\\n\\t\\t\\ts := SarcasmProc{}\\r\\n\\t\\t\\treturn &s\\r\\n\\t\\t},\\r\\n\\t\\tfunc(\\r\\n\\t\\t\\ticonf interface{},\\r\\n\\t\\t\\tmgr types.Manager,\\r\\n\\t\\t\\tlogger log.Modular,\\r\\n\\t\\t\\tstats metrics.Type,\\r\\n\\t\\t) (types.Processor, error) {\\r\\n\\t\\t\\treturn iconf.(*SarcasmProc), nil\\r\\n\\t\\t},\\r\\n\\t)\\r\\n\\r\\n\\tservice.Run()\\r\\n}\\r\\n```\\r\\n\\r\\nThe first argument is a string that identifies the type of this plugin, that\'s the string used to specify it within a Bento config file.\\r\\n\\r\\nThe second argument is a function that creates our config structure, this will be embedded within the Bento config specification. In this case our processor implementation is the same type as the configuration struct, but you can separate them if you prefer.\\r\\n\\r\\nThe third argument is the generic function that constructs our processor. In this case we\'ve already constructed it as our configuration type and so we can simply cast it and return it.\\r\\n\\r\\nNow you\'re going to build your custom Bento with:\\r\\n\\r\\n```sh\\r\\ngo build -o benthos\\r\\n```\\r\\n\\r\\n## Run Your Plugin\\r\\n\\r\\nIn order to execute your plugin with Bento you need a config. Write the following to a file `config.yaml`:\\r\\n\\r\\n```yaml\\r\\npipeline:\\r\\n  processors:\\r\\n  - type: how_sarcastic\\r\\n```\\r\\n\\r\\nAnd run it:\\r\\n\\r\\n```sh\\r\\n./benthos -c ./config.yaml\\r\\n```\\r\\n\\r\\nYour config hasn\'t specified an input or output so they will default to `stdin` and `stdout`. Write the line `\'this is not sarcastic\'`, followed by the line `\'this is sarcastic /s\'`. Bento should print `0` and `100` respectively.\\r\\n\\r\\nCool, but this config is pretty useless, good job idiot. Now you\'re going to fix your mistake. Let\'s imagine you are processing a stream of JSON documents of the form `{\\"id\\":\\"fooid\\",\\"content\\":\\"this is the content\\"}` and you want to add a field `sarcasm` containing the sarcasm level of `content`. You can do that purely through config by using the [`json`][json-proc] and [`process_field`][process-field-proc] processors:\\r\\n\\r\\n```yaml\\r\\npipeline:\\r\\n  processors:\\r\\n  - json:\\r\\n      operator: copy\\r\\n      path: content\\r\\n      value: sarcasm\\r\\n  - process_field:\\r\\n      path: sarcasm\\r\\n      result_type: float\\r\\n      processors:\\r\\n      - type: how_sarcastic\\r\\n```\\r\\n\\r\\nRun that config with some JSON documents:\\r\\n\\r\\n```sh\\r\\necho \'{\\"id\\":\\"foo1\\",\\"content\\":\\"this is totally sarcastic /s\\"}\\r\\n  {\\"id\\":\\"foo2\\",\\"content\\":\\"but this isnt sarcastic at all\\"}\' |\\r\\n  ./benthos -c ./config.yaml\\r\\n```\\r\\n\\r\\nYou\'ll see some log events but also you should see your two modified documents:\\r\\n\\r\\n```text\\r\\n{\\"content\\":\\"this is totally sarcastic /s\\",\\"id\\":\\"foo1\\",\\"sarcasm\\":100}\\r\\n{\\"content\\":\\"but this isnt sarcastic at all\\",\\"id\\":\\"foo2\\",\\"sarcasm\\":0}\\r\\n```\\r\\n\\r\\nThat\'s much more useful, but this is just barely scratching the surface of what Bento can do. For example, here\'s a config that calculates sarcasm with your processor and removes anything with a sarcasm level at or above 80:\\r\\n\\r\\n```yaml\\r\\npipeline:\\r\\n  processors:\\r\\n  - type: how_sarcastic\\r\\n    plugin:\\r\\n      metadata_key: sarcasm\\r\\n  - filter_parts:\\r\\n      metadata:\\r\\n        operator: less_than\\r\\n        key: sarcasm\\r\\n        arg: 80\\r\\n```\\r\\n\\r\\nNote that it makes use of your `metadata_key` field in order to filter the documents without changing their content.\\r\\n\\r\\nTry experimenting with other Bento processors, you can find the documentation at [benthos.dev/docs/components/processors/about][processors].\\r\\n\\r\\n## Next Steps\\r\\n\\r\\nAfter playing around with Bento processors you should check out the various [inputs][inputs], [outputs][outputs], [metrics aggregators][metrics] and [tracers][tracers] that it\'s able to hook up with.\\r\\n\\r\\nFor example, here\'s a modified version of the previous config where we write from Kafka to an S3 bucket, sending our metrics to Prometheus:\\r\\n\\r\\n```yaml\\r\\nhttp:\\r\\n  address: 0.0.0.0:4195\\r\\n\\r\\ninput:\\r\\n  kafka:\\r\\n    addresses:\\r\\n    - localhost:9092\\r\\n    consumer_group: foo_consumer_group\\r\\n    topics:\\r\\n    - foo_stream\\r\\n\\r\\npipeline:\\r\\n  processors:\\r\\n  - type: how_sarcastic\\r\\n    plugin:\\r\\n      metadata_key: sarcasm\\r\\n  - filter_parts:\\r\\n      metadata:\\r\\n        operator: less_than\\r\\n        key: sarcasm\\r\\n        arg: 80\\r\\n\\r\\noutput:\\r\\n  s3:\\r\\n    bucket: foo_bucket\\r\\n    content_type: application/json\\r\\n    path: ${!metadata:kafka_key}-${!timestamp_unix_nano}-${!count:files}.json\\r\\n\\r\\nmetrics:\\r\\n  # Endpoint hosted at both :4195/stats and :4195/metrics\\r\\n  type: prometheus\\r\\n```\\r\\n\\r\\nI\'m sure you\'ll make great use of Bento plugins with your extremely important work /s.\\r\\n\\r\\n[benthos]: https://www.benthos.dev\\r\\n[benthos-repo]: https://github.com/warpstreamlabs/bento\\r\\n[plugin-repo]: https://github.com/warpstreamlabs/bento-plugin-example\\r\\n[processors]: https://benthos.dev/docs/components/processors/about\\r\\n[inputs]: https://benthos.dev/docs/components/inputs/about\\r\\n[outputs]: https://benthos.dev/docs/components/outputs/about\\r\\n[metrics]: https://benthos.dev/docs/components/metrics/about\\r\\n[tracers]: https://benthos.dev/docs/components/tracers/about\\r\\n[benthos-proc]: https://benthos.dev/docs/components/processors/about\\r\\n[json-proc]: https://benthos.dev/docs/components/processors/json\\r\\n[subprocess-proc]: https://benthos.dev/docs/components/processors/subprocess\\r\\n[http-proc]: https://benthos.dev/docs/components/processors/http\\r\\n[lambda-proc]: https://benthos.dev/docs/components/processors/lambda\\r\\n[process-field-proc]: https://benthos.dev/docs/components/processors/process_field\\r\\n[types-processor]: https://godoc.org/github.com/warpstreamlabs/bento/lib/types#Processor\\r\\n[proc-register-plugin]: https://godoc.org/github.com/warpstreamlabs/bento/lib/processor#RegisterPlugin"},{"id":"/2019/06/17/introducing-benthos-lab","metadata":{"permalink":"/blog/2019/06/17/introducing-benthos-lab","source":"@site/blog/2019-06-17-introducing-benthos-lab.md","title":"Introducing Bento Lab","description":"Where you can build your very own monstrosities","date":"2019-06-17T00:00:00.000Z","formattedDate":"June 17, 2019","tags":[{"label":"Bento Lab","permalink":"/blog/tags/bento-lab"}],"readingTime":2.91,"hasTruncateMarker":true,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"Introducing Bento Lab","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","description":"Where you can build your very own monstrosities","keywords":["benthos","benthos lab","web assembly","wasm","go","golang","stream processor"],"tags":["Bento Lab"]},"unlisted":false,"prevItem":{"title":"Write a Bento Plugin","permalink":"/blog/2019/08/20/write-a-benthos-plugin"},"nextItem":{"title":"Compiling Bento to Web Assembly","permalink":"/blog/2019/05/27/compiling-benthos-to-wasm"}},"content":"After experimenting with innovative new ways to choke your browser to death I am\\r\\npleased to announce Bento Lab, which lives at\\r\\n[https://lab.benthos.dev](https://lab.benthos.dev).\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nBento Lab is a website where users of the [Bento stream processor][benthos]\\r\\ncan write, format, execute and share their pipeline configurations. This was\\r\\nmade possible by compiling the entire service (written in Go) into Web Assembly\\r\\nso that it can run directly in your browser.\\r\\n\\r\\nHere\'s a video of it in action: [https://youtu.be/1ZN-42A0sJU][lab-video].\\r\\n\\r\\nSome technical details about how this was achieved can be found in\\r\\n[a previous post of mine][wasm-blog]. The repo can be found at:\\r\\n[https://github.com/warpstreamlabs/bento-lab][lab-repo], feel free to clone it,\\r\\nhack it and host your own version.\\r\\n\\r\\n[![benthos-lab](/img/introducing-benthos-lab/banner.svg)][benthos-lab]\\r\\n\\r\\nLike every good laboratory it is scrappy and sometimes explodes. You need a\\r\\nmodern browser version and it doesn\'t currently support mobile. Regardless, I\\r\\nthink it\'s a good time to invite you try it out. Don\'t worry, I\'ll be watching\\r\\nfrom a safe distance.\\r\\n\\r\\nAlso, if it does break on you then please remember that you don\'t pay me for\\r\\nthis, you vile parasite.\\r\\n\\r\\n## Why\\r\\n\\r\\nAt Meltwater we have many distributed teams using Bento for a wide and ever\\r\\nincreasing list of use cases, which results in a lot of remote collaboration.\\r\\n\\r\\nFor the slower moving, asynchronous types of work we are usually fine with ye\\r\\nolde git. However, sometimes it\'s nice to quickly hash stuff out, at which point\\r\\nthings would suddenly devolve into a barrage of files getting chaotically thrown\\r\\nat a slack channel.\\r\\n\\r\\n![slamming-slack](/img/introducing-benthos-lab/slamslack.jpg)\\r\\n\\r\\nBy contrast, the lab is a civilised place where one can quickly and easily\\r\\ncreate a pipeline concept, including sample input data, and share it directly\\r\\nwith a group. Opening up a shared lab provides all that same context, allows you\\r\\nto make your own revisions to it, and even lets you execute it in order to see\\r\\nthe results it produces.\\r\\n\\r\\n![genteel-lab](/img/introducing-benthos-lab/genteel.jpg)\\r\\n\\r\\nFor our teams this app dramatically reduced the time taken to create, prove and\\r\\ndemonstrate a pipeline concept. It\'s also much quicker for me to help teams that\\r\\nhave issues with their configs as they can make sure I have all the information\\r\\nneeded up front with a single URL.\\r\\n\\r\\n### Use it to build your own web app\\r\\n\\r\\nThere\'s also plenty of unintended use cases for Bento Lab as it basically\\r\\nallows you to build your own custom web applications. Here\'s a session that\\r\\nlower cases and normalises a JSON document, computes its sha256 hash and then\\r\\nhex encodes the hash:\\r\\n[https://lab.benthos.dev/l/N-3sss3WPjj#input](https://lab.benthos.dev/l/N-3sss3WPjj#input).\\r\\n\\r\\nPro tip: if you add the anchor `#input` to the end of the session URL then it\\r\\nopens up at the input tab for quickly inserting stuff.\\r\\n\\r\\nSince there\'s such a vast catalogue of Bento\\r\\n[processors available][benthos-procs] I\'ve already found myself bookmarking a\\r\\nfew lab sessions as general utilities.\\r\\n\\r\\n## Next Steps\\r\\n\\r\\nWith this running within the sandbox of your browser there\'s lots of missing\\r\\nfunctionality. For example, you can\'t create TCP/UDP connections (as of right\\r\\nnow) and you can\'t access a file system.\\r\\n\\r\\nHowever, I don\'t plan to address this any time soon as the intention of the app\\r\\nis to test snippets of config, not to execute your whole damn streaming\\r\\npipeline. You ought to learn to manage your expectations.\\r\\n\\r\\nWhat I will do though is continue to improve the UI. If a feature you want is\\r\\nmissing (or broken, obviously) then please [open an issue][lab-issues].\\r\\n\\r\\n[benthos-lab]: https://lab.benthos.dev\\r\\n[lab-video]: https://youtu.be/1ZN-42A0sJU\\r\\n[wasm-blog]: /blog/2019/05/27/compiling-benthos-to-wasm/\\r\\n[lab-repo]: https://github.com/warpstreamlabs/bento-lab\\r\\n[lab-issues]: https://github.com/warpstreamlabs/bento-lab/issues\\r\\n[benthos]: https://www.benthos.dev\\r\\n[under-the-hood]: https://underthehood.meltwater.com/\\r\\n[benthos-procs]: https://benthos.dev/docs/components/processors/about"},{"id":"/2019/05/27/compiling-benthos-to-wasm","metadata":{"permalink":"/blog/2019/05/27/compiling-benthos-to-wasm","source":"@site/blog/2019-05-27-compiling-benthos-to-wasm.md","title":"Compiling Bento to Web Assembly","description":"Don\'t worry about why","date":"2019-05-27T00:00:00.000Z","formattedDate":"May 27, 2019","tags":[{"label":"Bento Lab","permalink":"/blog/tags/bento-lab"}],"readingTime":3.73,"hasTruncateMarker":true,"authors":[{"name":"Ashley Jeffs","url":"https://github.com/Jeffail","imageURL":"/img/ash.jpg"}],"frontMatter":{"title":"Compiling Bento to Web Assembly","author":"Ashley Jeffs","author_url":"https://github.com/Jeffail","author_image_url":"/img/ash.jpg","description":"Don\'t worry about why","keywords":["benthos","go","golang","web assembly","wasm","gowasm"],"tags":["Bento Lab"]},"unlisted":false,"prevItem":{"title":"Introducing Bento Lab","permalink":"/blog/2019/06/17/introducing-benthos-lab"}},"content":"Web assembly won\'t fix seasons 7 and 8, but it\'s still pretty cool. At a\\r\\n[Meltwater hackathon](https://underthehood.meltwater.com/blog/2019/06/17/benthos-lab-a-case-study-of-hackathon-innovation/) I had a project in mind (details soon to\\r\\nfollow) that would benefit hugely from Bento running directly in the browser.\\r\\nI therefore set out to compile it in wasm, this is my short and sweet journey.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## The Build\\r\\n\\r\\nThe first thing I did and the first thing you ought to do if you are targeting\\r\\nwasm yourself is skim through [this section of the Go wiki][wasm-go-wiki].\\r\\n\\r\\nIn short, I wrote a Go file:\\r\\n\\r\\n``` go\\r\\npackage main\\r\\n\\r\\nimport (\\r\\n\\t\\"syscall/js\\"\\r\\n\\r\\n\\t\\"github.com/warpstreamlabs/bento/lib/config\\"\\r\\n\\t\\"gopkg.in/yaml.v3\\"\\r\\n)\\r\\n\\r\\nfunc normalise(this js.Value, args []js.Value) interface{} {\\r\\n\\tvar configStr string\\r\\n\\tif len(args) > 0 {\\r\\n\\t\\tconfigStr = args[0].String()\\r\\n\\t}\\r\\n\\r\\n\\tconf := config.New()\\r\\n\\r\\n\\t// Ignoring errors for brevity\\r\\n\\tyaml.Unmarshal([]byte(configStr), &conf)\\r\\n\\r\\n\\tsanit, _ := conf.Sanitised()\\r\\n\\tsanitBytes, _ := yaml.Marshal(sanit)\\r\\n\\r\\n\\treturn string(sanitBytes)\\r\\n}\\r\\n\\r\\nfunc main() {\\r\\n\\tc := make(chan struct{}, 0)\\r\\n\\tjs.Global().Set(\\"benthosNormaliseConfig\\", js.FuncOf(normalise))\\r\\n\\t<-c\\r\\n}\\r\\n```\\r\\n\\r\\nAnd compiled it:\\r\\n\\r\\n``` sh\\r\\nGOOS=js GOARCH=wasm go build -o main.wasm\\r\\n```\\r\\n\\r\\nI was pretty sure that this would be the end of the road for me. Bento uses a\\r\\nvast swathe of dependencies for its various connectors and so I was sure that I\\r\\nwould be immobilised with errors. However, to my surprise there were only three\\r\\n(formatted for brevity):\\r\\n\\r\\n``` text\\r\\nlib/util/disk/check.go:29:11: undefined: syscall.Statfs_t\\r\\ngithub.com/edsrzf/mmap-go@v1.0.0/mmap.go:77:9: undefined: mmap\\r\\ngithub.com/lib/pq@v1.0.0/conn.go:321:13: undefined: userCurrent\\r\\n```\\r\\n\\r\\nWhich involved some calls for a buffer implementation using a memory-mapped file\\r\\nlibrary and the PostgreSQL driver for the SQL package. The errors themselves are\\r\\nbasically \\"this thing doesn\'t exist in Web Assembly\\", which usually means the\\r\\nlibrary has a feature behind build constraints but doesn\'t support wasm yet.\\r\\n\\r\\nThe solution for these problems in my case was as simple as to not to do the\\r\\ncall, and perhaps document that the feature doesn\'t work with a wasm build.\\r\\n\\r\\nObviously, we only want to disable these calls specifically when targeting wasm.\\r\\nIn Go that\'s easy, stick a cheeky\\r\\n[build constraint on there][go-build-constraint]. Here\'s the actual commit:\\r\\n[9903b3d5d8519fcf7ecbce94c336e7f054a75942][wasm-commit], note that you can\'t\\r\\njust constrain the feature, you also need to add an empty stub that has the\\r\\nopposite constraint in order to satisfy your build.\\r\\n\\r\\n## Executing Go From JavaScript\\r\\n\\r\\nThe [Go Wiki][wasm-go-wiki] shows you how to actually execute your wasm build\\r\\nand I won\'t repeat it here, but I followed the steps and it was pretty straight\\r\\nforward.\\r\\n\\r\\nThere was, however, one issue I came across. Some functions that I was calling\\r\\nfrom JavaScript were causing my wasm runtime to panic and stop. The functions\\r\\nall had channel blocking in common, something like this:\\r\\n\\r\\n``` go\\r\\nfunc ashHasACoolBlog(this js.Value, args []js.Value) interface{} {\\r\\n\\tsomeChan <- args[0].String()\\r\\n\\treturn <-someOtherChanIHateNamingThings\\r\\n}\\r\\n```\\r\\n\\r\\nThe function would sometimes execute successfully. Other times, specifically for\\r\\nlonger running calls, I would get a deadlock panic:\\r\\n\\r\\n``` text\\r\\nfatal error: all goroutines are asleep - deadlock! wasm_exec.js:47:6\\r\\nwasm_exec.js:47:6\\r\\ngoroutine 1 [chan receive]: wasm_exec.js:47:6\\r\\nmain.main() wasm_exec.js:47:6\\r\\n\\t/home/ash/tmp/wasm/main.go:20 +0x7\\r\\n```\\r\\n\\r\\nWhich was odd as they would be occasions where I would not expect a real\\r\\ndeadlock. I then found the relevant docs in the [`syscall/js`][syscall-js-func]\\r\\npackage:\\r\\n\\r\\n> Blocking operations in the wrapped function will block the event loop. As a\\r\\n> consequence, if one wrapped function blocks, other wrapped funcs will not be\\r\\n> processed. A blocking function should therefore explicitly start a new\\r\\n> goroutine.\\r\\n\\r\\nThe consequences of blocking sound pretty harmless here, but in reality it\\r\\nseemed to be the cause of my deadlock crash. I assume the odd error message is a\\r\\nresult of some nuanced mechanics within the wasm runtime.\\r\\n\\r\\nI didn\'t investigate this crash any further as I was a lazy idiot back in those\\r\\ndark days. I simply stopped writing blocking functions, and instead spawned\\r\\ngoroutines everywhere like they were losers at a Nickelback concert:\\r\\n\\r\\n``` go\\r\\nfunc iJustWantToClarify(this js.Value, args []js.Value) interface{} {\\r\\n\\tgo func() {\\r\\n\\t\\tsomeChan <- args[0].String()\\r\\n\\t\\totherThing := <-someOtherChanIHateNamingThings\\r\\n\\r\\n\\t\\tjs.Global().Get(\\"thatActually\\").Set(\\r\\n\\t\\t\\t\\"textContent\\",\\r\\n\\t\\t\\t\\"I quite enjoy and respect Knickelback as artists... \\" + otherThing,\\r\\n\\t\\t)\\r\\n\\t}()\\r\\n\\treturn nil\\r\\n}\\r\\n```\\r\\n\\r\\n## Other Issues\\r\\n\\r\\nThere weren\'t any. \\r\\n\\r\\n## Final Words\\r\\n\\r\\nIt took a day for me to get a working application together and soon I\'ll be\\r\\nblogging about the resulting product. Web assembly with Go is yummy.\\r\\n\\r\\nKudos to both the W3C and the Go team for taking their time to build something\\r\\nto completion without rushing the conclusion. Yes, I\'m still bitter about Game\\r\\nof Thrones.\\r\\n\\r\\n[meltwater]: https://underthehood.meltwater.com/blog/2019/06/17/benthos-lab-a-case-study-of-hackathon-innovation/\\r\\n[Bento]: https://www.benthos.dev/\\r\\n[wasm-go-wiki]: https://github.com/golang/go/wiki/WebAssembly\\r\\n[syscall-js-func]: https://godoc.org/syscall/js#Func\\r\\n[go-build-constraint]: https://golang.org/pkg/go/build/#hdr-Build_Constraints\\r\\n[wasm-commit]: https://github.com/warpstreamlabs/bento/commit/9903b3d5d8519fcf7ecbce94c336e7f054a75942#diff-146b6fd87106d7f70f56facf7b1e7d98"}]}')}}]);