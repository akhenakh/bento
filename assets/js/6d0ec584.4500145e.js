"use strict";(self.webpackChunkbento=self.webpackChunkbento||[]).push([[7386],{29497:function(e,n,s){s.r(n),s.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return a},toc:function(){return d}});var t=s(85893),r=s(11151);const o={title:"Streams Via Config Files"},i=void 0,a={id:"guides/streams_mode/using_config_files",title:"Streams Via Config Files",description:"When running Bento in streams mode it's possible to create streams with their own static configurations, simply list one or more files after the streams subcommand:",source:"@site/docs/guides/streams_mode/using_config_files.md",sourceDirName:"guides/streams_mode",slug:"/guides/streams_mode/using_config_files",permalink:"/docs/guides/streams_mode/using_config_files",draft:!1,unlisted:!1,editUrl:"https://github.com/warpstreamlabs/bento/edit/main/website/docs/guides/streams_mode/using_config_files.md",tags:[],version:"current",frontMatter:{title:"Streams Via Config Files"},sidebar:"docs",previous:{title:"About",permalink:"/docs/guides/streams_mode/about"},next:{title:"Streams Via REST API",permalink:"/docs/guides/streams_mode/using_rest_api"}},c={},d=[{value:"Resources",id:"resources",level:2},{value:"Walkthrough",id:"walkthrough",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["When running Bento in ",(0,t.jsx)(n.code,{children:"streams"})," mode it's possible to create streams with their own static configurations, simply list one or more files after the ",(0,t.jsx)(n.code,{children:"streams"})," subcommand:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"bento streams ./foo.yaml ./configs/*.yaml\n"})}),"\n",(0,t.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(n.p,{children:["A stream configuration should only include the base stream component fields (",(0,t.jsx)(n.code,{children:"input"}),", ",(0,t.jsx)(n.code,{children:"buffer"}),", ",(0,t.jsx)(n.code,{children:"pipeline"}),", ",(0,t.jsx)(n.code,{children:"output"}),"), and therefore should NOT include any ",(0,t.jsx)(n.a,{href:"/docs/configuration/resources",children:"resources"}),". Instead, define resources separately and import them using the ",(0,t.jsx)(n.code,{children:"-r"}),"/",(0,t.jsx)(n.code,{children:"--resources"})," flag:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'bento -r "./resources/prod/*.yaml" streams ./stream_configs/*.yaml\n'})}),"\n",(0,t.jsx)(n.h2,{id:"walkthrough",children:"Walkthrough"}),"\n",(0,t.jsx)(n.p,{children:"Make a directory of stream configs:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ mkdir ./streams\n\n$ cat > ./streams/foo.yaml <<EOF\ninput:\n  http_server: {}\npipeline:\n  threads: 4\n  processors:\n    - mapping: 'root = {\"id\": this.user.id, \"content\": this.body.content}'\noutput:\n  http_server: {}\nEOF\n\n$ cat > ./streams/bar.yaml <<EOF\ninput:\n  kafka:\n    addresses:\n      - localhost:9092\n    topics:\n      - my_topic\npipeline:\n  threads: 1\n  processors:\n    - mapping: 'root = this.uppercase()'\noutput:\n  elasticsearch:\n    urls:\n    - http://localhost:9200\nEOF\n"})}),"\n",(0,t.jsx)(n.p,{children:"Run Bento in streams mode, pointing to our directory of streams:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ bento streams ./streams/*.yaml\n"})}),"\n",(0,t.jsx)(n.p,{children:"On a separate terminal you can query the set of streams loaded:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'$ curl http://localhost:4195/streams | jq \'.\'\n{\n  "bar": {\n    "active": true,\n    "uptime": 19.381001424,\n    "uptime_str": "19.381001552s"\n  },\n  "foo": {\n    "active": true,\n    "uptime": 19.380582951,\n    "uptime_str": "19.380583306s"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can also query a specific stream to see the loaded configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'$ curl http://localhost:4195/streams/foo | jq \'.\'\n{\n  "active": true,\n  "uptime": 69.334717193,\n  "uptime_str": "1m9.334717193s",\n  "config": {\n    "input": {\n      "http_server": {\n        "address": "",\n        "cert_file": "",\n        "key_file": "",\n        "path": "/post",\n        "timeout": "5s"\n      }\n    },\n    "buffer": {\n      "memory": {\n        "limit": 10000000\n      }\n    },\n    "pipeline": {\n      "processors": [\n        {\n          "mapping": "root = {\\"id\\": this.user.id, \\"content\\": this.body.content}",\n        }\n      ],\n      "threads": 4\n    },\n    "output": {\n      "http_server": {\n        "address": "",\n        "cert_file": "",\n        "key_file": "",\n        "path": "/get",\n        "stream_path": "/get/stream",\n        "timeout": "5s"\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can then send data to the stream via its namespaced URL:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'$ curl http://localhost:4195/foo/post -d \'{"user":{"id":"foo"},"body":{"content":"bar"}}\'\n'})}),"\n",(0,t.jsxs)(n.p,{children:["There are other endpoints ",(0,t.jsx)(n.a,{href:"/docs/guides/streams_mode/using_rest_api",children:"in the REST API"})," for creating, updating and deleting streams."]})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return i}});var t=s(67294);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);