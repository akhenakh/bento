"use strict";(self.webpackChunkbento=self.webpackChunkbento||[]).push([[8188],{51592:function(e,n,s){s.r(n),s.d(n,{assets:function(){return d},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return h}});var t=s(85893),i=s(11151),r=s(74866),l=s(85162);const a={title:"gcp_bigquery",slug:"gcp_bigquery",type:"output",status:"beta",categories:["GCP","Services"],name:"gcp_bigquery"},o=void 0,c={id:"components/outputs/gcp_bigquery",title:"gcp_bigquery",description:"\x3c!--",source:"@site/docs/components/outputs/gcp_bigquery.md",sourceDirName:"components/outputs",slug:"/components/outputs/gcp_bigquery",permalink:"/bento/docs/components/outputs/gcp_bigquery",draft:!1,unlisted:!1,editUrl:"https://github.com/warpstreamlabs/bento/edit/main/website/docs/components/outputs/gcp_bigquery.md",tags:[],version:"current",frontMatter:{title:"gcp_bigquery",slug:"gcp_bigquery",type:"output",status:"beta",categories:["GCP","Services"],name:"gcp_bigquery"},sidebar:"docs",previous:{title:"file",permalink:"/bento/docs/components/outputs/file"},next:{title:"gcp_cloud_storage",permalink:"/bento/docs/components/outputs/gcp_cloud_storage"}},d={},h=[{value:"Credentials",id:"credentials",level:2},{value:"Format",id:"format",level:2},{value:"CSV",id:"csv",level:3},{value:"Performance",id:"performance",level:2},{value:"Fields",id:"fields",level:2},{value:"<code>project</code>",id:"project",level:3},{value:"<code>dataset</code>",id:"dataset",level:3},{value:"<code>table</code>",id:"table",level:3},{value:"<code>format</code>",id:"format-1",level:3},{value:"<code>max_in_flight</code>",id:"max_in_flight",level:3},{value:"<code>write_disposition</code>",id:"write_disposition",level:3},{value:"<code>create_disposition</code>",id:"create_disposition",level:3},{value:"<code>ignore_unknown_values</code>",id:"ignore_unknown_values",level:3},{value:"<code>max_bad_records</code>",id:"max_bad_records",level:3},{value:"<code>auto_detect</code>",id:"auto_detect",level:3},{value:"<code>job_labels</code>",id:"job_labels",level:3},{value:"<code>csv</code>",id:"csv-1",level:3},{value:"<code>csv.header</code>",id:"csvheader",level:3},{value:"<code>csv.field_delimiter</code>",id:"csvfield_delimiter",level:3},{value:"<code>csv.allow_jagged_rows</code>",id:"csvallow_jagged_rows",level:3},{value:"<code>csv.allow_quoted_newlines</code>",id:"csvallow_quoted_newlines",level:3},{value:"<code>csv.encoding</code>",id:"csvencoding",level:3},{value:"<code>csv.skip_leading_rows</code>",id:"csvskip_leading_rows",level:3},{value:"<code>batching</code>",id:"batching",level:3},{value:"<code>batching.count</code>",id:"batchingcount",level:3},{value:"<code>batching.byte_size</code>",id:"batchingbyte_size",level:3},{value:"<code>batching.period</code>",id:"batchingperiod",level:3},{value:"<code>batching.check</code>",id:"batchingcheck",level:3},{value:"<code>batching.processors</code>",id:"batchingprocessors",level:3}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{title:"BETA",type:"caution",children:(0,t.jsx)(n.p,{children:"This component is mostly stable but breaking changes could still be made outside of major version releases if a fundamental problem with the component is found."})}),"\n",(0,t.jsx)(n.p,{children:"Sends messages as new rows to a Google Cloud BigQuery table."}),"\n",(0,t.jsx)(n.p,{children:"Introduced in version 3.55.0."}),"\n",(0,t.jsxs)(r.Z,{defaultValue:"common",values:[{label:"Common",value:"common"},{label:"Advanced",value:"advanced"}],children:[(0,t.jsx)(l.Z,{value:"common",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'# Common config fields, showing default values\noutput:\n  label: ""\n  gcp_bigquery:\n    project: ""\n    dataset: "" # No default (required)\n    table: "" # No default (required)\n    format: NEWLINE_DELIMITED_JSON\n    max_in_flight: 64\n    job_labels: {}\n    csv:\n      header: []\n      field_delimiter: \',\'\n    batching:\n      count: 0\n      byte_size: 0\n      period: ""\n      check: ""\n'})})}),(0,t.jsx)(l.Z,{value:"advanced",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'# All config fields, showing default values\noutput:\n  label: ""\n  gcp_bigquery:\n    project: ""\n    dataset: "" # No default (required)\n    table: "" # No default (required)\n    format: NEWLINE_DELIMITED_JSON\n    max_in_flight: 64\n    write_disposition: WRITE_APPEND\n    create_disposition: CREATE_IF_NEEDED\n    ignore_unknown_values: false\n    max_bad_records: 0\n    auto_detect: false\n    job_labels: {}\n    csv:\n      header: []\n      field_delimiter: \',\'\n      allow_jagged_rows: false\n      allow_quoted_newlines: false\n      encoding: UTF-8\n      skip_leading_rows: 1\n    batching:\n      count: 0\n      byte_size: 0\n      period: ""\n      check: ""\n      processors: [] # No default (optional)\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"credentials",children:"Credentials"}),"\n",(0,t.jsxs)(n.p,{children:["By default Bento will use a shared credentials file when connecting to GCP services. You can find out more ",(0,t.jsx)(n.a,{href:"/docs/guides/cloud/gcp",children:"in this document"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"format",children:"Format"}),"\n",(0,t.jsx)(n.p,{children:"This output currently supports only CSV and NEWLINE_DELIMITED_JSON formats. Learn more about how to use GCP BigQuery with them here:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-json",children:(0,t.jsx)(n.code,{children:"NEWLINE_DELIMITED_JSON"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-csv",children:(0,t.jsx)(n.code,{children:"CSV"})})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Each message may contain multiple elements separated by newlines. For example a single message containing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{"key": "1"}\n{"key": "2"}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Is equivalent to two separate messages:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{"key": "1"}\n'})}),"\n",(0,t.jsx)(n.p,{children:"And:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{"key": "2"}\n'})}),"\n",(0,t.jsx)(n.p,{children:"The same is true for the CSV format."}),"\n",(0,t.jsx)(n.h3,{id:"csv",children:"CSV"}),"\n",(0,t.jsxs)(n.p,{children:["For the CSV format when the field ",(0,t.jsx)(n.code,{children:"csv.header"})," is specified a header row will be inserted as the first line of each message batch. If this field is not provided then the first message of each message batch must include a header line."]}),"\n",(0,t.jsx)(n.h2,{id:"performance",children:"Performance"}),"\n",(0,t.jsxs)(n.p,{children:["This output benefits from sending multiple messages in flight in parallel for improved performance. You can tune the max number of in flight messages (or message batches) with the field ",(0,t.jsx)(n.code,{children:"max_in_flight"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This output benefits from sending messages as a batch for improved performance. Batches can be formed at both the input and output level. You can find out more ",(0,t.jsx)(n.a,{href:"/docs/configuration/batching",children:"in this doc"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"fields",children:"Fields"}),"\n",(0,t.jsx)(n.h3,{id:"project",children:(0,t.jsx)(n.code,{children:"project"})}),"\n",(0,t.jsx)(n.p,{children:"The project ID of the dataset to insert data to. If not set, it will be inferred from the credentials or read from the GOOGLE_CLOUD_PROJECT environment variable."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'""'})]}),"\n",(0,t.jsx)(n.h3,{id:"dataset",children:(0,t.jsx)(n.code,{children:"dataset"})}),"\n",(0,t.jsx)(n.p,{children:"The BigQuery Dataset ID."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"table",children:(0,t.jsx)(n.code,{children:"table"})}),"\n",(0,t.jsx)(n.p,{children:"The table to insert messages to."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.h3,{id:"format-1",children:(0,t.jsx)(n.code,{children:"format"})}),"\n",(0,t.jsx)(n.p,{children:"The format of each incoming message."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'"NEWLINE_DELIMITED_JSON"'}),(0,t.jsx)(n.br,{}),"\n","Options: ",(0,t.jsx)(n.code,{children:"NEWLINE_DELIMITED_JSON"}),", ",(0,t.jsx)(n.code,{children:"CSV"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"max_in_flight",children:(0,t.jsx)(n.code,{children:"max_in_flight"})}),"\n",(0,t.jsx)(n.p,{children:"The maximum number of message batches to have in flight at a given time. Increase this to improve throughput."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"int"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"64"})]}),"\n",(0,t.jsx)(n.h3,{id:"write_disposition",children:(0,t.jsx)(n.code,{children:"write_disposition"})}),"\n",(0,t.jsx)(n.p,{children:"Specifies how existing data in a destination table is treated."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'"WRITE_APPEND"'}),(0,t.jsx)(n.br,{}),"\n","Options: ",(0,t.jsx)(n.code,{children:"WRITE_APPEND"}),", ",(0,t.jsx)(n.code,{children:"WRITE_EMPTY"}),", ",(0,t.jsx)(n.code,{children:"WRITE_TRUNCATE"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"create_disposition",children:(0,t.jsx)(n.code,{children:"create_disposition"})}),"\n",(0,t.jsx)(n.p,{children:"Specifies the circumstances under which destination table will be created. If CREATE_IF_NEEDED is used the GCP BigQuery will create the table if it does not already exist and tables are created atomically on successful completion of a job. The CREATE_NEVER option ensures the table must already exist and will not be automatically created."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'"CREATE_IF_NEEDED"'}),(0,t.jsx)(n.br,{}),"\n","Options: ",(0,t.jsx)(n.code,{children:"CREATE_IF_NEEDED"}),", ",(0,t.jsx)(n.code,{children:"CREATE_NEVER"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"ignore_unknown_values",children:(0,t.jsx)(n.code,{children:"ignore_unknown_values"})}),"\n",(0,t.jsx)(n.p,{children:"Causes values not matching the schema to be tolerated. Unknown values are ignored. For CSV this ignores extra values at the end of a line. For JSON this ignores named values that do not match any column name. If this field is set to false (the default value), records containing unknown values are treated as bad records. The max_bad_records field can be used to customize how bad records are handled."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"bool"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"false"})]}),"\n",(0,t.jsx)(n.h3,{id:"max_bad_records",children:(0,t.jsx)(n.code,{children:"max_bad_records"})}),"\n",(0,t.jsx)(n.p,{children:"The maximum number of bad records that will be ignored when reading data."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"int"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"0"})]}),"\n",(0,t.jsx)(n.h3,{id:"auto_detect",children:(0,t.jsx)(n.code,{children:"auto_detect"})}),"\n",(0,t.jsxs)(n.p,{children:["Indicates if we should automatically infer the options and schema for CSV and JSON sources. If the table doesn't exist and this field is set to ",(0,t.jsx)(n.code,{children:"false"})," the output may not be able to insert data and will throw insertion error. Be careful using this field since it delegates to the GCP BigQuery service the schema detection and values like ",(0,t.jsx)(n.code,{children:'"no"'})," may be treated as booleans for the CSV format."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"bool"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"false"})]}),"\n",(0,t.jsx)(n.h3,{id:"job_labels",children:(0,t.jsx)(n.code,{children:"job_labels"})}),"\n",(0,t.jsx)(n.p,{children:"A list of labels to add to the load job."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"object"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"{}"})]}),"\n",(0,t.jsx)(n.h3,{id:"csv-1",children:(0,t.jsx)(n.code,{children:"csv"})}),"\n",(0,t.jsx)(n.p,{children:"Specify how CSV data should be interpretted."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"object"})]}),"\n",(0,t.jsx)(n.h3,{id:"csvheader",children:(0,t.jsx)(n.code,{children:"csv.header"})}),"\n",(0,t.jsx)(n.p,{children:"A list of values to use as header for each batch of messages. If not specified the first line of each message will be used as header."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"array"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"[]"})]}),"\n",(0,t.jsx)(n.h3,{id:"csvfield_delimiter",children:(0,t.jsx)(n.code,{children:"csv.field_delimiter"})}),"\n",(0,t.jsx)(n.p,{children:"The separator for fields in a CSV file, used when reading or exporting data."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'","'})]}),"\n",(0,t.jsx)(n.h3,{id:"csvallow_jagged_rows",children:(0,t.jsx)(n.code,{children:"csv.allow_jagged_rows"})}),"\n",(0,t.jsx)(n.p,{children:"Causes missing trailing optional columns to be tolerated when reading CSV data. Missing values are treated as nulls."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"bool"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"false"})]}),"\n",(0,t.jsx)(n.h3,{id:"csvallow_quoted_newlines",children:(0,t.jsx)(n.code,{children:"csv.allow_quoted_newlines"})}),"\n",(0,t.jsx)(n.p,{children:"Sets whether quoted data sections containing newlines are allowed when reading CSV data."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"bool"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"false"})]}),"\n",(0,t.jsx)(n.h3,{id:"csvencoding",children:(0,t.jsx)(n.code,{children:"csv.encoding"})}),"\n",(0,t.jsx)(n.p,{children:"Encoding is the character encoding of data to be read."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'"UTF-8"'}),(0,t.jsx)(n.br,{}),"\n","Options: ",(0,t.jsx)(n.code,{children:"UTF-8"}),", ",(0,t.jsx)(n.code,{children:"ISO-8859-1"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"csvskip_leading_rows",children:(0,t.jsx)(n.code,{children:"csv.skip_leading_rows"})}),"\n",(0,t.jsx)(n.p,{children:"The number of rows at the top of a CSV file that BigQuery will skip when reading data. The default value is 1 since Bento will add the specified header in the first line of each batch sent to BigQuery."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"int"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"1"})]}),"\n",(0,t.jsx)(n.h3,{id:"batching",children:(0,t.jsx)(n.code,{children:"batching"})}),"\n",(0,t.jsxs)(n.p,{children:["Allows you to configure a ",(0,t.jsx)(n.a,{href:"/docs/configuration/batching",children:"batching policy"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"object"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'# Examples\n\nbatching:\n  byte_size: 5000\n  count: 0\n  period: 1s\n\nbatching:\n  count: 10\n  period: 1s\n\nbatching:\n  check: this.contains("END BATCH")\n  count: 0\n  period: 1m\n'})}),"\n",(0,t.jsx)(n.h3,{id:"batchingcount",children:(0,t.jsx)(n.code,{children:"batching.count"})}),"\n",(0,t.jsxs)(n.p,{children:["A number of messages at which the batch should be flushed. If ",(0,t.jsx)(n.code,{children:"0"})," disables count based batching."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"int"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"0"})]}),"\n",(0,t.jsx)(n.h3,{id:"batchingbyte_size",children:(0,t.jsx)(n.code,{children:"batching.byte_size"})}),"\n",(0,t.jsxs)(n.p,{children:["An amount of bytes at which the batch should be flushed. If ",(0,t.jsx)(n.code,{children:"0"})," disables size based batching."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"int"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:"0"})]}),"\n",(0,t.jsx)(n.h3,{id:"batchingperiod",children:(0,t.jsx)(n.code,{children:"batching.period"})}),"\n",(0,t.jsx)(n.p,{children:"A period in which an incomplete batch should be flushed regardless of its size."}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'""'})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"# Examples\n\nperiod: 1s\n\nperiod: 1m\n\nperiod: 500ms\n"})}),"\n",(0,t.jsx)(n.h3,{id:"batchingcheck",children:(0,t.jsx)(n.code,{children:"batching.check"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.a,{href:"/docs/guides/bloblang/about/",children:"Bloblang query"})," that should return a boolean value indicating whether a message should end a batch."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"string"}),(0,t.jsx)(n.br,{}),"\n","Default: ",(0,t.jsx)(n.code,{children:'""'})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:'# Examples\n\ncheck: this.type == "end_of_transaction"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"batchingprocessors",children:(0,t.jsx)(n.code,{children:"batching.processors"})}),"\n",(0,t.jsxs)(n.p,{children:["A list of ",(0,t.jsx)(n.a,{href:"/docs/components/processors/about",children:"processors"})," to apply to a batch as it is flushed. This allows you to aggregate and archive the batch however you see fit. Please note that all resulting messages are flushed as a single batch, therefore splitting the batch into smaller batches using these processors is a no-op."]}),"\n",(0,t.jsxs)(n.p,{children:["Type: ",(0,t.jsx)(n.code,{children:"array"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"# Examples\n\nprocessors:\n  - archive:\n      format: concatenate\n\nprocessors:\n  - archive:\n      format: lines\n\nprocessors:\n  - archive:\n      format: json_array\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},85162:function(e,n,s){s.d(n,{Z:function(){return l}});s(67294);var t=s(86010),i={tabItem:"tabItem_Ymn6"},r=s(85893);function l(e){let{children:n,hidden:s,className:l}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.Z)(i.tabItem,l),hidden:s,children:n})}},74866:function(e,n,s){s.d(n,{Z:function(){return y}});var t=s(67294),i=s(86010),r=s(12466),l=s(16550),a=s(20469),o=s(91980),c=s(67392),d=s(50012);function h(e){var n,s;return null!=(n=null==(s=t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:s.filter(Boolean))?n:[]}function u(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=null!=n?n:function(e){return h(e).map((e=>{let{props:{value:n,label:s,attributes:t,default:i}}=e;return{value:n,label:s,attributes:t,default:i}}))}(s);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,s])}function p(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:s}=e;const i=(0,l.k6)(),r=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=s?s:null}({queryString:n,groupId:s});return[(0,o._X)(r),(0,t.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function j(e){const{defaultValue:n,queryString:s=!1,groupId:i}=e,r=u(e),[l,o]=(0,t.useState)((()=>function(e){var n;let{defaultValue:s,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!p({value:s,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+s+'" but none of its children has the corresponding value. Available values are: '+t.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return s}const i=null!=(n=t.find((e=>e.default)))?n:t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[c,h]=x({queryString:s,groupId:i}),[j,b]=function(e){let{groupId:n}=e;const s=function(e){return e?"docusaurus.tab."+e:null}(n),[i,r]=(0,d.Nk)(s);return[i,(0,t.useCallback)((e=>{s&&r.set(e)}),[s,r])]}({groupId:i}),f=(()=>{const e=null!=c?c:j;return p({value:e,tabValues:r})?e:null})();(0,a.Z)((()=>{f&&o(f)}),[f]);return{selectedValue:l,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error("Can't select invalid tab value="+e);o(e),h(e),b(e)}),[h,b,r]),tabValues:r}}var b=s(72389),f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"},g=s(85893);function m(e){let{className:n,block:s,selectedValue:t,selectValue:l,tabValues:a}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),d=e=>{const n=e.currentTarget,s=o.indexOf(n),i=a[s].value;i!==t&&(c(n),l(i))},h=e=>{var n;let s=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{var t;const n=o.indexOf(e.currentTarget)+1;s=null!=(t=o[n])?t:o[0];break}case"ArrowLeft":{var i;const n=o.indexOf(e.currentTarget)-1;s=null!=(i=o[n])?i:o[o.length-1];break}}null==(n=s)||n.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":s},n),children:a.map((e=>{let{value:n,label:s,attributes:r}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>o.push(e),onKeyDown:h,onClick:d,...r,className:(0,i.Z)("tabs__item",f.tabItem,null==r?void 0:r.className,{"tabs__item--active":t===n}),children:null!=s?s:n},n)}))})}function v(e){let{lazy:n,children:s,selectedValue:i}=e;const r=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function _(e){const n=j(e);return(0,g.jsxs)("div",{className:(0,i.Z)("tabs-container",f.tabList),children:[(0,g.jsx)(m,{...e,...n}),(0,g.jsx)(v,{...e,...n})]})}function y(e){const n=(0,b.Z)();return(0,g.jsx)(_,{...e,children:h(e.children)},String(n))}},11151:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return l}});var t=s(67294);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);