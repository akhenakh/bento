"use strict";(self.webpackChunkbento=self.webpackChunkbento||[]).push([[2502],{25943:function(e,s,n){n.r(s),n.d(s,{assets:function(){return a},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return c}});var t=n(85893),i=n(11151);const r={title:"Streams API"},o=void 0,d={id:"guides/streams_mode/streams_api",title:"Streams API",description:"When Bento is run in streams mode it will open up an HTTP REST API for creating and managing independent streams of data instead of creating a single stream.",source:"@site/docs/guides/streams_mode/streams_api.md",sourceDirName:"guides/streams_mode",slug:"/guides/streams_mode/streams_api",permalink:"/docs/guides/streams_mode/streams_api",draft:!1,unlisted:!1,editUrl:"https://github.com/warpstreamlabs/bento/edit/main/website/docs/guides/streams_mode/streams_api.md",tags:[],version:"current",frontMatter:{title:"Streams API"},sidebar:"docs",previous:{title:"Streams Via REST API",permalink:"/docs/guides/streams_mode/using_rest_api"},next:{title:"Migrating to Version 4",permalink:"/docs/guides/migration/v4"}},a={},c=[{value:"API",id:"api",level:2},{value:"GET <code>/ready</code>",id:"get-ready",level:3},{value:"GET <code>/streams</code>",id:"get-streams",level:3},{value:"Response 200",id:"response-200",level:4},{value:"POST <code>/streams</code>",id:"post-streams",level:3},{value:"Response 200",id:"response-200-1",level:4},{value:"Response 400",id:"response-400",level:4},{value:"POST <code>/streams/{id}</code>",id:"post-streamsid",level:3},{value:"Request Body Example",id:"request-body-example",level:4},{value:"Response 200",id:"response-200-2",level:4},{value:"Response 400",id:"response-400-1",level:4},{value:"GET <code>/streams/{id}</code>",id:"get-streamsid",level:3},{value:"Response 200",id:"response-200-3",level:4},{value:"PUT <code>/streams/{id}</code>",id:"put-streamsid",level:3},{value:"Response 200",id:"response-200-4",level:4},{value:"Response 400",id:"response-400-2",level:4},{value:"PATCH <code>/streams/{id}</code>",id:"patch-streamsid",level:3},{value:"Response 200",id:"response-200-5",level:4},{value:"DELETE <code>/streams/{id}</code>",id:"delete-streamsid",level:3},{value:"Response 200",id:"response-200-6",level:4},{value:"GET <code>/streams/{id}/stats</code>",id:"get-streamsidstats",level:3},{value:"Response 200",id:"response-200-7",level:4},{value:"POST <code>/resources/{type}/{id}</code>",id:"post-resourcestypeid",level:3},{value:"Request Body Example",id:"request-body-example-1",level:4},{value:"Response 200",id:"response-200-8",level:4},{value:"Response 400",id:"response-400-3",level:4}];function l(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["When Bento is run in ",(0,t.jsx)(s.code,{children:"streams"})," mode it will open up an HTTP REST API for creating and managing independent streams of data instead of creating a single stream."]}),"\n",(0,t.jsxs)(s.p,{children:["Each stream has its own input, buffer, pipeline and output sections which contains an isolated stream of data with its own lifetime. A stream config cannot include ",(0,t.jsx)(s.a,{href:"/docs/configuration/resources",children:"resources"}),", and instead these should be created and modified using the ",(0,t.jsx)(s.code,{children:"/resources/{type}/{id}"})," endpoint."]}),"\n",(0,t.jsxs)(s.p,{children:["A walkthrough on using this API ",(0,t.jsx)(s.a,{href:"/docs/guides/streams_mode/using_rest_api",children:"can be found here"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"api",children:"API"}),"\n",(0,t.jsxs)(s.h3,{id:"get-ready",children:["GET ",(0,t.jsx)(s.code,{children:"/ready"})]}),"\n",(0,t.jsx)(s.p,{children:"Returns a 200 OK response if all active streams are connected to their respective inputs and outputs at the time of the request. Otherwise, a 503 response is returned along with a message naming the faulty stream."}),"\n",(0,t.jsx)(s.p,{children:"If zero streams are active this endpoint still returns a 200 OK response."}),"\n",(0,t.jsxs)(s.h3,{id:"get-streams",children:["GET ",(0,t.jsx)(s.code,{children:"/streams"})]}),"\n",(0,t.jsx)(s.p,{children:"Returns a map of existing streams by their unique identifiers to an object showing their status and uptime."}),"\n",(0,t.jsx)(s.h4,{id:"response-200",children:"Response 200"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n\t"<string, stream id>": {\n\t\t"active": "<bool, whether the stream is running>",\n\t\t"uptime": "<float, uptime in seconds>",\n\t\t"uptime_str": "<string, human readable string of uptime>"\n\t}\n}\n'})}),"\n",(0,t.jsxs)(s.h3,{id:"post-streams",children:["POST ",(0,t.jsx)(s.code,{children:"/streams"})]}),"\n",(0,t.jsxs)(s.p,{children:["Sets the entire collection of streams to the body of the request. Streams that exist but aren't within the request body are ",(0,t.jsx)(s.em,{children:"removed"}),", streams that exist already and are in the request body are updated, other streams within the request body are created."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n\t"<string, stream id>": "<object, a standard Bento stream configuration>"\n}\n'})}),"\n",(0,t.jsx)(s.h4,{id:"response-200-1",children:"Response 200"}),"\n",(0,t.jsx)(s.p,{children:"The streams were updated successfully."}),"\n",(0,t.jsx)(s.h4,{id:"response-400",children:"Response 400"}),"\n",(0,t.jsx)(s.p,{children:"A configuration was invalid, or has linting errors. If linting errors were detected then a JSON response is provided of the form:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n\t"linting_errors": [\n\t\t"<a description of the error"\n\t]\n}\n'})}),"\n",(0,t.jsxs)(s.p,{children:["If you wish for the streams API to proceed with configurations that contain linting errors then you can override this check by setting the URL param ",(0,t.jsx)(s.code,{children:"chilled"})," to ",(0,t.jsx)(s.code,{children:"true"}),", e.g. ",(0,t.jsx)(s.code,{children:"/streams?chilled=true"}),"."]}),"\n",(0,t.jsxs)(s.h3,{id:"post-streamsid",children:["POST ",(0,t.jsx)(s.code,{children:"/streams/{id}"})]}),"\n",(0,t.jsxs)(s.p,{children:["Create a new stream identified by ",(0,t.jsx)(s.code,{children:"id"})," by posting a body containing the stream configuration in either JSON or YAML format. The configuration should be a standard Bento configuration containing the sections ",(0,t.jsx)(s.code,{children:"input"}),", ",(0,t.jsx)(s.code,{children:"buffer"}),", ",(0,t.jsx)(s.code,{children:"pipeline"})," and ",(0,t.jsx)(s.code,{children:"output"}),"."]}),"\n",(0,t.jsx)(s.h4,{id:"request-body-example",children:"Request Body Example"}),"\n",(0,t.jsxs)(s.p,{children:["URL: ",(0,t.jsx)(s.code,{children:"/streams/foo"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:"input:\n  file:\n    paths: [ /tmp/input.ndjson ]\npipeline:\n  processors:\n    - mapping: root = content().uppercase()\noutput:\n  file:\n    path: /tmp/output.ndjson\n"})}),"\n",(0,t.jsx)(s.h4,{id:"response-200-2",children:"Response 200"}),"\n",(0,t.jsx)(s.p,{children:"The stream was created successfully."}),"\n",(0,t.jsx)(s.h4,{id:"response-400-1",children:"Response 400"}),"\n",(0,t.jsx)(s.p,{children:"The configuration was invalid, or has linting errors. If linting errors were detected then a JSON response is provided of the form:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n\t"linting_errors": [\n\t\t"<a description of the error"\n\t]\n}\n'})}),"\n",(0,t.jsxs)(s.p,{children:["If you wish for the streams API to proceed with configurations that contain linting errors then you can override this check by setting the URL param ",(0,t.jsx)(s.code,{children:"chilled"})," to ",(0,t.jsx)(s.code,{children:"true"}),", e.g. ",(0,t.jsx)(s.code,{children:"/streams/foo?chilled=true"}),"."]}),"\n",(0,t.jsxs)(s.h3,{id:"get-streamsid",children:["GET ",(0,t.jsx)(s.code,{children:"/streams/{id}"})]}),"\n",(0,t.jsxs)(s.p,{children:["Read the details of an existing stream identified by ",(0,t.jsx)(s.code,{children:"id"}),"."]}),"\n",(0,t.jsx)(s.h4,{id:"response-200-3",children:"Response 200"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n\t"active": "<bool, whether the stream is running>",\n\t"uptime": "<float, uptime in seconds>",\n\t"uptime_str": "<string, human readable string of uptime>",\n\t"config": "<object, the configuration of the stream>"\n}\n'})}),"\n",(0,t.jsxs)(s.h3,{id:"put-streamsid",children:["PUT ",(0,t.jsx)(s.code,{children:"/streams/{id}"})]}),"\n",(0,t.jsxs)(s.p,{children:["Update an existing stream identified by ",(0,t.jsx)(s.code,{children:"id"})," by posting a body containing the new stream configuration in either JSON or YAML format. The configuration should be a standard Bento configuration containing the sections ",(0,t.jsx)(s.code,{children:"input"}),", ",(0,t.jsx)(s.code,{children:"buffer"}),", ",(0,t.jsx)(s.code,{children:"pipeline"})," and ",(0,t.jsx)(s.code,{children:"output"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"The previous stream will be shut down before and a new stream will take its place."}),"\n",(0,t.jsx)(s.h4,{id:"response-200-4",children:"Response 200"}),"\n",(0,t.jsx)(s.p,{children:"The stream was updated successfully."}),"\n",(0,t.jsx)(s.h4,{id:"response-400-2",children:"Response 400"}),"\n",(0,t.jsx)(s.p,{children:"The configuration was invalid, or has linting errors. If linting errors were detected then a JSON response is provided of the form:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n\t"linting_errors": [\n\t\t"<a description of the error"\n\t]\n}\n'})}),"\n",(0,t.jsxs)(s.p,{children:["If you wish for the streams API to proceed with configurations that contain linting errors then you can override this check by setting the URL param ",(0,t.jsx)(s.code,{children:"chilled"})," to ",(0,t.jsx)(s.code,{children:"true"}),", e.g. ",(0,t.jsx)(s.code,{children:"/streams/foo?chilled=true"}),"."]}),"\n",(0,t.jsxs)(s.h3,{id:"patch-streamsid",children:["PATCH ",(0,t.jsx)(s.code,{children:"/streams/{id}"})]}),"\n",(0,t.jsxs)(s.p,{children:["Update an existing stream identified by ",(0,t.jsx)(s.code,{children:"id"})," by posting a body containing only changes to be made to the existing configuration. The existing configuration will be patched with the new fields and the stream restarted with the result."]}),"\n",(0,t.jsx)(s.h4,{id:"response-200-5",children:"Response 200"}),"\n",(0,t.jsx)(s.p,{children:"The stream was patched successfully."}),"\n",(0,t.jsxs)(s.h3,{id:"delete-streamsid",children:["DELETE ",(0,t.jsx)(s.code,{children:"/streams/{id}"})]}),"\n",(0,t.jsxs)(s.p,{children:["Attempt to shut down and remove a stream identified by ",(0,t.jsx)(s.code,{children:"id"}),"."]}),"\n",(0,t.jsx)(s.h4,{id:"response-200-6",children:"Response 200"}),"\n",(0,t.jsx)(s.p,{children:"The stream was found, shut down and removed successfully."}),"\n",(0,t.jsxs)(s.h3,{id:"get-streamsidstats",children:["GET ",(0,t.jsx)(s.code,{children:"/streams/{id}/stats"})]}),"\n",(0,t.jsx)(s.p,{children:"Read the metrics of an existing stream as a hierarchical JSON object."}),"\n",(0,t.jsx)(s.h4,{id:"response-200-7",children:"Response 200"}),"\n",(0,t.jsx)(s.p,{children:"The stream was found."}),"\n",(0,t.jsxs)(s.h3,{id:"post-resourcestypeid",children:["POST ",(0,t.jsx)(s.code,{children:"/resources/{type}/{id}"})]}),"\n",(0,t.jsxs)(s.p,{children:["Add or modify a resource component configuration of a given ",(0,t.jsx)(s.code,{children:"type"})," identified by a unique ",(0,t.jsx)(s.code,{children:"id"}),". The configuration must be in JSON or YAML format and must only contain configuration fields for the component."]}),"\n",(0,t.jsxs)(s.p,{children:["Valid component types are ",(0,t.jsx)(s.code,{children:"cache"}),", ",(0,t.jsx)(s.code,{children:"input"}),", ",(0,t.jsx)(s.code,{children:"output"}),", ",(0,t.jsx)(s.code,{children:"processor"})," and ",(0,t.jsx)(s.code,{children:"rate_limit"}),"."]}),"\n",(0,t.jsx)(s.h4,{id:"request-body-example-1",children:"Request Body Example"}),"\n",(0,t.jsxs)(s.p,{children:["URL: ",(0,t.jsx)(s.code,{children:"/resources/cache/foo"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yml",children:"redis:\n  url: http://localhost:6379\n  expiration: 1h\n"})}),"\n",(0,t.jsx)(s.h4,{id:"response-200-8",children:"Response 200"}),"\n",(0,t.jsx)(s.p,{children:"The resource was created successfully."}),"\n",(0,t.jsx)(s.h4,{id:"response-400-3",children:"Response 400"}),"\n",(0,t.jsx)(s.p,{children:"The configuration was invalid, or has linting errors. If linting errors were detected then a JSON response is provided of the form:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n\t"linting_errors": [\n\t\t"<a description of the error"\n\t]\n}\n'})}),"\n",(0,t.jsxs)(s.p,{children:["If you wish for the streams API to proceed with configurations that contain linting errors then you can override this check by setting the URL param ",(0,t.jsx)(s.code,{children:"chilled"})," to ",(0,t.jsx)(s.code,{children:"true"}),", e.g. ",(0,t.jsx)(s.code,{children:"/resources/cache/foo?chilled=true"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:function(e,s,n){n.d(s,{Z:function(){return d},a:function(){return o}});var t=n(67294);const i={},r=t.createContext(i);function o(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);